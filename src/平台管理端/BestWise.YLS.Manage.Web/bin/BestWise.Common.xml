<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BestWise.Common</name>
    </assembly>
    <members>
        <member name="T:BestWise.Common.AlertMessage">
            <summary>
            提示窗口的实体类。
            </summary>
        </member>
        <member name="T:BestWise.Common.ResultMessage">
            <summary>
            操作结果消息实体类
            </summary>
        </member>
        <member name="M:BestWise.Common.ResultMessage.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:BestWise.Common.ResultMessage.IsSucceed">
            <summary>
            操作是否成功。
            </summary>
            <returns>返回是否成功。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.SucceedResult(System.String)">
            <summary>
            获取成功的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.SucceedResult">
            <summary>
            获取成功的消息对象。
            </summary>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.SucceedResult``1(System.String,``0)">
            <summary>
            获取成功的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="data">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.SucceedResult``1(``0)">
            <summary>
            获取成功的消息对象。
            </summary>
            <param name="data">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.UnauthorizedResult(System.String)">
            <summary>
            获取未授权的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.UnauthorizedResult``1(System.String)">
            <summary>
            获取未授权的消息对象。
            </summary>
            <typeparam name="TData">业务数据对象的类型。</typeparam>
            <param name="message">消息内容。</param>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.UnauthorizedResult">
            <summary>
            获取未授权的消息对象。
            </summary>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.ExistDataResult``1(System.String,``0)">
            <summary>
            获取已存在的的消息对象。
            </summary>
            <typeparam name="TData">业务数据对象的类型。</typeparam>
            <param name="message">消息内容。</param>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.ExistDataResult(System.String)">
            <summary>
            获取已存在的的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.NonexistenceResult``1(System.String,``0)">
            <summary>
            获取已存在的的消息对象。
            </summary>
            <typeparam name="TData">业务数据对象的类型。</typeparam>
            <param name="message">消息内容。</param>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.NonexistenceResult(System.String)">
            <summary>
            获取已存在的的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.ExistDataResult">
            <summary>
            获取已存在的的消息对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.UnauthorizedResult``1">
            <summary>
            获取未授权的消息对象。
            </summary>
            <typeparam name="TData">业务数据对象的类型。</typeparam>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult(System.String)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult``1(System.String)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult``1(System.String,``0)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult">
            <summary>
            获取失败的消息对象。
            </summary>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult``1">
            <summary>
            获取失败的消息对象。
            </summary>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult(System.Exception)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="exception">异常对象。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult``1(System.Exception)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="exception">异常对象。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.FailureResult``1(System.Exception,``0)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="exception">异常对象。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult(System.String,System.Collections.Generic.IList{BestWise.Common.ValidErrors})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult(System.String,System.String,System.String)">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="field">参数名称。</param>
            <param name="errorMessage">参数的错误消息。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="errors">参数错误消息队。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult``1(System.String,System.Collections.Generic.IList{BestWise.Common.ValidErrors})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult``1(System.String,System.String,System.String)">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="field">参数名称。</param>
            <param name="errorMessage">参数的错误消息。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="errors">参数错误消息队。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult(System.Collections.Generic.IList{BestWise.Common.ValidErrors})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.InvalidResult``1(System.Collections.Generic.IList{BestWise.Common.ValidErrors})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.GetAsync(System.Func{System.Boolean},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="function"></param>
            <param name="succeedMessage"></param>
            <param name="failureMessage"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.GetAsync(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.GetAsync``1(System.Func{``0})">
            <summary>
            
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.GetAsync``1(System.Func{``0},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.ToApi``1(``0)">
            <summary>
            转换成 API 的返回结果对象实例
            </summary>
            <returns>返回API 的返回结果对象实例</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage.ToApi``1">
            <summary>
            转换成 API 的返回结果对象实例
            </summary>
            <returns>返回API 的返回结果对象实例</returns>
        </member>
        <member name="P:BestWise.Common.ResultMessage.ServerStatus">
            <summary>
            服务器状态
            </summary>
        </member>
        <member name="P:BestWise.Common.ResultMessage.Status">
            <summary>
            操作结果状态
            </summary>
        </member>
        <member name="P:BestWise.Common.ResultMessage.Message">
            <summary>
            操作结果消息
            </summary>
        </member>
        <member name="P:BestWise.Common.ResultMessage.Errors">
            <summary>
            请求对象未通过验证的错误消息列表
            </summary>
        </member>
        <member name="P:BestWise.Common.ResultMessage.Url">
            <summary>
            操作成功后的跳转页面。
            </summary>
        </member>
        <member name="M:BestWise.Common.AlertMessage.#ctor(BestWise.Common.ResultMessage,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="result">操作结果消息实体类</param>
            <param name="title">提示窗口标题</param>
            <param name="url">确定后跳转地址</param>
        </member>
        <member name="M:BestWise.Common.AlertMessage.#ctor(BestWise.Common.ResultMessage,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="result">操作结果消息实体类</param>
            <param name="title">提示窗口标题</param>
        </member>
        <member name="M:BestWise.Common.AlertMessage.#ctor(BestWise.Common.ResultMessage)">
            <summary>
            构造方法
            </summary>
            <param name="result">操作结果消息实体类</param>
        </member>
        <member name="M:BestWise.Common.AlertMessage.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:BestWise.Common.AlertMessage.Title">
            <summary>
            提示窗口标题。
            </summary>
        </member>
        <member name="P:BestWise.Common.AlertMessage.Url">
            <summary>
            确定后跳转地址。
            </summary>
        </member>
        <member name="T:BestWise.Common.ApiResult">
            <summary>
            操作结果消息实体类
            </summary>
        </member>
        <member name="M:BestWise.Common.ApiResult.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:BestWise.Common.ApiResult.Status">
            <summary>
            操作结果状态
            </summary>
        </member>
        <member name="P:BestWise.Common.ApiResult.Message">
            <summary>
            操作结果消息
            </summary>
        </member>
        <member name="P:BestWise.Common.ApiResult.Errors">
            <summary>
            请求对象未通过验证的错误消息列表
            </summary>
        </member>
        <member name="T:BestWise.Common.ApiResult`1">
            <summary>
            操作结果消息实体类
            </summary>
        </member>
        <member name="P:BestWise.Common.ApiResult`1.Data">
            <summary>
            业务数据
            </summary>
        </member>
        <member name="T:BestWise.Common.AsposeCellHelper">
            <summary>
            Excel导出
            </summary>
        </member>
        <member name="M:BestWise.Common.AsposeCellHelper.SaveColumnsHierarchy(System.Collections.Generic.List{BestWise.Common.AsposeCellHelper.JqxTableColumns},System.Collections.Generic.List{BestWise.Common.AsposeCellHelper.JqxTableColumnsGroup},System.Data.DataTable,System.String)">
            <summary>
            导出EXCEL并且动态生成多级表头
            </summary>
            <param name="columns">列</param>
            <param name="group">分组</param>
            <param name="dt">dataTable</param>
            <param name="path">保存路径</param>
        </member>
        <member name="M:BestWise.Common.AsposeCellHelper.SaveColumnsHierarchy(System.String,System.Collections.Generic.List{BestWise.Common.AsposeCellHelper.JqxTableColumns},System.Collections.Generic.List{BestWise.Common.AsposeCellHelper.JqxTableColumnsGroup},System.Data.DataTable)">
            <summary>
            导出EXCEL并且动态生成多级表头
            </summary>
            <param name="columns">列</param>
            <param name="group">分组</param>
            <param name="dt">dataTable</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:BestWise.Common.AsposeCellHelper.SaveColumnsHierarchy(System.Collections.Generic.List{BestWise.Common.AsposeCellHelper.JqxTableColumns},System.Data.DataTable)">
            <summary>
            导出EXCEL
            </summary>
            <param name="columns">列</param>
            <param name="dt">dataTable</param>
        </member>
        <member name="M:BestWise.Common.AsposeCellHelper.FormatImg(System.String)">
            <summary>
            将远程图片转二进制
            </summary>
            <param name="imgpath"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.AsposeCellHelper.GetExcelData(System.String)">
            <summary>
            读取Excel数据
            </summary>
            <param name="excelPath">excel路径</param>
            <returns></returns>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper._thStyle">
            <summary>
            表头样式
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper._tdStyle">
            <summary>
            表格样式
            </summary>
        </member>
        <member name="T:BestWise.Common.AsposeCellHelper.JqxTableColumns">
            <summary>
            表头对象
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumns.field">
            <summary>
            对应字段
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumns.cellsAlign">
            <summary>
            表格对齐方式
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumns.align">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumns.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumns.columngroup">
            <summary>
            对应的列组
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumns.isimg">
            <summary>
            是否为图片
            </summary>
        </member>
        <member name="T:BestWise.Common.AsposeCellHelper.JqxTableColumnsGroup">
            <summary>
            表头组
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumnsGroup.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumnsGroup.align">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="P:BestWise.Common.AsposeCellHelper.JqxTableColumnsGroup.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:BestWise.Common.AsposeCellHelper.AsposeCellInfo">
            <summary>
            表格信息
            </summary>
        </member>
        <member name="M:BestWise.Common.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="func"></param>
        </member>
        <member name="T:BestWise.Common.BaseFilter">
            <summary>
            基本筛选条件实体类
            </summary>
        </member>
        <member name="P:BestWise.Common.BaseFilter.PageIndex">
            <summary> 
            当前页码 
            </summary> 
        </member>
        <member name="P:BestWise.Common.BaseFilter.PageSize">
            <summary> 
            当前分页大小 
            </summary> 
        </member>
        <member name="P:BestWise.Common.BaseFilter.IsPage">
            <summary> 
            是否分页 
            </summary> 
        </member>
        <member name="P:BestWise.Common.BaseFilter.Condition">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="P:BestWise.Common.BaseFilter.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:BestWise.Common.BaseToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:BestWise.Common.BaseToken.AccessToken">
            <summary>
            访问令牌
            </summary>
        </member>
        <member name="P:BestWise.Common.BaseToken.TokenType">
            <summary>
            令牌类型
            </summary>
        </member>
        <member name="P:BestWise.Common.BaseToken.ExpiresIn">
            <summary>
            还有多久过期(单位：秒)
            </summary>
        </member>
        <member name="P:BestWise.Common.BaseToken.Issued">
            <summary>
            令牌发行日期
            </summary>
        </member>
        <member name="P:BestWise.Common.BaseToken.Expires">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:BestWise.Common.BWMQ.Constants.GetHost">
            <summary>
            获取Host
            </summary>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.BWMQ.IMessaging`1">
            <summary>
            This is the interface that the MessagingFactory returns.
            To create a new implementation of Order Messaging, developers 
            need to implement this interface to comply with Abstract Factory Design Pattern
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BestWise.Common.BWMQ.IMessaging`1.Receive">
            <summary>
            Method to retrieve order information from a messaging queue
            </summary>
            <returns>All information about an order</returns>
        </member>
        <member name="M:BestWise.Common.BWMQ.IMessaging`1.Receive(System.Int32)">
            <summary>
            Method to retrieve order information from a messaging queue
            </summary>
            <returns>All information about an order</returns>
        </member>
        <member name="M:BestWise.Common.BWMQ.IMessaging`1.Send(`0)">
            <summary>
            Method to send an order to a message queue for later processing
            </summary>
            <param name="body">All information about an order</param>
        </member>
        <member name="T:BestWise.Common.BWMQ.MSMQ`1">
            <summary>
            微软的消息队列
            </summary>
            <typeparam name="T">消息队列中的消息的对象类型。</typeparam>
        </member>
        <member name="M:BestWise.Common.BWMQ.MSMQ`1.#ctor(System.String,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="queuePath"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:BestWise.Common.BWMQ.MSMQ`1.Receive">
            <summary>
            接收消息队列中的消息对象实例。
            </summary>
            <returns>返回消息队列中的消息对象实例。</returns>
        </member>
        <member name="M:BestWise.Common.BWMQ.MSMQ`1.Send(`0)">
            <summary>
            发送消息对象实例到消息队列中。
            </summary>
            <param name="message">消息对象实例。</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Exist(System.String)">
            <summary>
            缓存是否存在key的value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Remove(System.String)">
            <summary>
            根据key删除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.DateTime)">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration">绝对过期时间</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Retrieve``1(System.String)">
            <summary>
            获得key对应的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.CacheHelper.GetAllKeys">
            <summary>
            获取所有的缓存key
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Flush">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.String)">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="filename">缓存对象所依赖的文件或目录的路径。当该资源更改时，缓存的对象将过时，并从缓存中移除。</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.String[])">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="filenames">缓存对象所依赖的一组（到文件或目录的）路径。当这些资源中的任何一个更改时，缓存的对象即过时，并从缓存中移除。</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.String[],System.String[])">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="filePaths">依赖于多个文件物理路径</param>
            <param name="cachekeys">一组缓存键，新对象监视它们的更改。当这些缓存键中的任何一个发生更改时，与此依赖项对象关联的缓存对象即过时，并从缓存中移除。</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.String[],System.String[],System.Web.Caching.CacheDependency)">
             <summary>
             添加缓存
             </summary>
             <param name="key"></param>
             <param name="value"></param>
             <param name="filePaths">依赖于多个文件物理路径</param>
             <param name="cachekeys">一组缓存键，新对象监视它们的更改。当这些缓存键中的任何一个发生更改时，与此依赖项对象关联的缓存对象即过时，并从缓存中移除。</param>
            <param name="dependency">此实例所依赖的 System.Web.Caching.CacheDependency 类的另一个实例。</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.Data.SqlClient.SqlCommand)">
            <summary>
            添加缓存
            并使用提供的 System.Data.SqlClient.SqlCommand 创建缓存键依赖项。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="sqlCmd">用于创建 System.Web.Caching.SqlCacheDependency 对象的 System.Data.SqlClient.SqlCommand。</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.Store(System.String,System.Object,System.String,System.String)">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="databaseEntryName">在应用程序的 Web.config 文件的 databases Element for sqlCacheDependency for caching (ASP.NET Settings Schema) 元素中定义的数据库的名称。</param>
            <param name="tableName">与 System.Web.Caching.SqlCacheDependency 关联的数据库表的名称。</param>
        </member>
        <member name="M:BestWise.Common.CacheHelper.GetObject``1(System.String,System.String)">
            <summary>
            通用对象反射(包含缓存)
            </summary>
            <typeparam name="T">返回对象的类型</typeparam>
            <param name="dllFilename">要反射的类所在DLL文件名(不含文件扩展名)</param>
            <param name="className">要反射的类名</param>
            <returns>一个指定类型的对象实例</returns>
        </member>
        <member name="M:BestWise.Common.CacheHelper.GetObject``1(System.String,System.String,``0)">
            <summary>
            通用对象反射(包含缓存)
            </summary>
            <typeparam name="T">返回对象的类型</typeparam>
            <param name="dllFilename">要反射的类所在DLL文件名(不含文件扩展名)</param>
            <param name="className">要反射的类名</param>
            <param name="defaultObject">dllFilename为空时，返回的对象</param>
            <returns>一个指定类型的对象实例</returns>
        </member>
        <member name="M:BestWise.Common.CacheHelper.GetObject``1(System.String,System.String,System.String)">
            <summary>
            通用对象反射(包含缓存)
            </summary>
            <typeparam name="T">返回对象的类型</typeparam>
            <param name="dllFilename">要反射的类所在DLL文件名(不含文件扩展名)</param>
            <param name="className">要反射的类名</param>
            <param name="defaultDllFilename">dllFilename为空时，返回反射的类所在DLL文件名</param>
            <returns>一个指定类型的对象实例</returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.GetIPAddress">
            <summary>
            得到客户端IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.IPAddressToLong(System.String)">
            <summary>
            IP地址转换为长整型
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.GetBrowserType">
            <summary>
            浏览器类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.GetBrowserId">
            <summary>
            浏览器标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.GetBrowserVersion">
            <summary>
            浏览器版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.IsBetaByBrowser">
            <summary>
            浏览器是不是测试版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.GetBrowserResolution">
            <summary>
            浏览器的分辨率(像素)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.Platform">
            <summary>
            客户端的操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.IsWin16">
            <summary>
            是否是Win16系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.IsWin32">
            <summary>
            是否是Win32系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.GetClientComputerName(System.String)">
            <summary>
            获取客户端计算机名称
            </summary>
            <param name="clientIP"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ClientHelper.GetDeviceTypeByUserAgent">
            <summary>
            通过UserAgent获取设备类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.ConfigHelper">
            <summary>
            web.config操作类
            </summary>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConfigString(System.String)">
            <summary>
            得到AppSettings中的配置字符串信息
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConnection(System.String)">
            <summary>
            得到ConnectionStrings中的配置连接信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConnectionString(System.String)">
            <summary>
            得到ConnectionStrings中的配置连接字符串信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConfigBool(System.String)">
            <summary>
            得到AppSettings中的配置Bool信息
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConfigBool(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            得到AppSettings中的配置Bool信息
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConfigDecimal(System.String)">
            <summary>
            得到AppSettings中的配置Decimal信息
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConfigDecimal(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            得到AppSettings中的配置Decimal信息
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConfigInt(System.String)">
            <summary>
            得到AppSettings中的配置int信息
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:BestWise.Common.ConfigHelper.GetConfigInt(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            得到AppSettings中的配置int信息
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="T:BestWise.Common.ConvertUtils">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.ConvertToInt32(System.Object)">
            <summary>
            转换数字
            </summary>
            <param name="value">待转换对象</param>
            <returns>返回转换成功的数字，如果返回0，表示转换失败</returns>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.ConvertToInt64(System.Object)">
            <summary>
            转换数字
            </summary>
            <param name="value">待转换对象</param>
            <returns>返回转换成功的数字，如果返回0，表示转换失败</returns>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.ConvertToDecimal(System.Object)">
            <summary>
            转换成decimal数字
            </summary>
            <param name="value">待转换对象</param>
            <returns>返回转换成功的数字，如果返回0，表示转换失败</returns>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.ConvertToString(System.Object)">
            <summary>
            转换成字符串对象
            </summary>
            <param name="value">待转换对象</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.ConvertToDateTime(System.Object)">
            <summary>
            转换成日期对象
            </summary>
            <param name="value">待转换对象</param>
            <returns>返回1900-1-1表示转换失败时的时间</returns>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.ConvertToGuid(System.Object)">
            <summary>
            转换成Guid
            </summary>
            <param name="value">待转换对象</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.FormatRequestDate(System.Object)">
            <summary>
            格式化地址参数日期
            </summary>
            <param name="urlDate"></param>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.RemoveEnter(System.Object)">
            <summary>
            移除对象里面的回车、换行符
            </summary>
            <param name="source">待移除对象</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ConvertUtils.ReplaceSpecialCharacter(System.Object,System.String)">
            <summary>
            替换特殊字符
            </summary>
            <param name="str">待替换字符</param>
            <param name="replacement">替换成的字符</param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.DataCrypto">
            <summary>
            数据加密、解密类
            </summary>
        </member>
        <member name="M:BestWise.Common.DataCrypto.Base64StringDecode(System.String)">
            <summary>
            对输入的Base64字符串进行解码
            </summary>
            <param name="input">输入的Base64字符串</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DataCrypto.Base64StringEncode(System.String)">
            <summary>
            对输入字符串进行Base64编码
            </summary>
            <param name="input">输入的字符串</param>
            <returns>Base64编码后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DataCrypto.MD5(System.String)">
            <summary>
            对输入字符串进行MD5加密，返回小写形式的加密字符串，字符串为32字符的十六进制格式
            </summary>
            <param name="input">待加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DataCrypto.MD5GB2312(System.String)">
            <summary>
            对输入字符串进行GB2312格式的MD5加密，返回小写形式的加密字符串，字符串为32字符的十六进制格式
            此方法主要用于整合其他系统，兼容其他ASP系统的加密算法（ASP新MD5算法），与SiteWeaver的算法不完全兼容（ASP旧MD5算法）
            </summary>
            <param name="input">待加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DataCrypto.Sha1(System.String)">
            <summary>
            对输入字符串进行SHA1加密，返回小写形式的加密字符串，字符串为40字符的十六进制格式
            </summary>
            <param name="input">待加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DataCrypto.ValidateMD5(System.String,System.String)">
            <summary>
            旧版中密码哈希值保存为16位，在新版中采用32位保存
            将需验证的密码哈希值分别与密码明文MD5加密后的32位字符串以及密码MD5加密后从8位开始取16位的字符串进行比较
            两个条件满足其一，则验证通过
            </summary>
            <param name="hashValue">需要对比的密码哈希值</param>
            <param name="plaintext">密码明文</param>
            <returns>如果验证正确，则为 true；否则为 false。</returns>
        </member>
        <member name="M:BestWise.Common.DataCrypto.EncryptString(System.String,System.String)">
            <summary>
            8位密钥加密
            </summary>
            <param name="encryptValue"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DataCrypto.DecryptString(System.String,System.String)">
            <summary>
            8位密钥3des解密
            </summary>
            <param name="encryptedValue"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.DateTimeExtentions">
            <summary>
            日期时间的扩展类。
            </summary>
        </member>
        <member name="M:BestWise.Common.DateTimeExtentions.ToTicks(System.DateTime)">
            <summary>
            将日期时间转换成时间戳。
            </summary>
            <param name="dateTime">当前日期时间对象实例。</param>
            <returns>返回日期时间对象实例对应的时间戳</returns>
        </member>
        <member name="M:BestWise.Common.DateTimeExtentions.ToDateTime(System.Int64)">
            <summary>
            将时间戳转化成日期时间型对象实例。
            </summary>
            <param name="timeTicks">时间戳。</param>
            <returns>返回日期时间型对象实例。</returns>
        </member>
        <member name="M:BestWise.Common.DateTimeExtentions.FormatShortStr(System.Nullable{System.DateTime})">
            <summary>
            将时间转换为短时间字符串
            </summary>
            <param name="dt">时间</param>
            <returns>返回转换后的时间字符串</returns>
        </member>
        <member name="M:BestWise.Common.DateTimeExtentions.FormatStr(System.Nullable{System.DateTime})">
            <summary>
            将时间转换字符串
            </summary>
            <param name="dt">时间</param>
            <returns>返回转换后的时间字符串</returns>
        </member>
        <member name="T:BestWise.Common.DBUtility.AssembleInfo">
            <summary>
            emit所需要的元数据信息
            </summary>
        </member>
        <member name="M:BestWise.Common.DBUtility.AssembleInfo.CanSetted(System.Data.IDataRecord,System.String)">
            <summary>
            判断datareader是否存在某字段并且值不为空
            </summary>
            <param name="dr">当前的datareader</param>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DBUtility.AssembleInfo.CanSetted(System.Data.DataRow,System.String)">
            <summary>
            判断datarow所在的datatable是否存在某列并且值不为空
            </summary>
            <param name="dr">当前datarow</param>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.DBUtility.EffentNextType">
            <summary>
            影响下一个的类型
            </summary>
        </member>
        <member name="F:BestWise.Common.DBUtility.EffentNextType.None">
            <summary>
            对其他语句无任何影响 
            </summary>
        </member>
        <member name="F:BestWise.Common.DBUtility.EffentNextType.WhenHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果存在则继续执行，不存在回滚事务
            </summary>
        </member>
        <member name="F:BestWise.Common.DBUtility.EffentNextType.WhenNoHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="F:BestWise.Common.DBUtility.EffentNextType.ExcuteEffectRows">
            <summary>
            当前语句影响到的行数必须大于0，否则回滚事务
            </summary>
        </member>
        <member name="F:BestWise.Common.DBUtility.EffentNextType.SolicitationEvent">
            <summary>
            引发事件-当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="T:BestWise.Common.DBUtility.CommandInfo">
            <summary>
            命令信息
            </summary>
        </member>
        <member name="T:BestWise.Common.DataColumnAttribute">
            <summary>
            数据列名特性
            </summary>
        </member>
        <member name="M:BestWise.Common.DataColumnAttribute.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:BestWise.Common.DataColumnAttribute.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:BestWise.Common.DataColumnAttribute.TableName">
            <summary>
            表名或表别名
            </summary>
        </member>
        <member name="M:System.Data.DataRowExtentions.GetStringValue(System.Data.DataRow,System.String,System.String)">
            <summary>
            获取当前数据行某的字符串值。
            </summary>
            <param name="dr">数据行对象实例。</param>
            <param name="colName">列名。</param>
            <param name="defaultValue">默认值。</param>
            <returns>返回当前数据行某的字符串值。</returns>
        </member>
        <member name="M:System.Data.DataRowExtentions.GetIntValue(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            获取当前数据行某的整型值。
            </summary>
            <param name="dr">数据行对象实例。</param>
            <param name="colName">列名。</param>
            <param name="defaultValue">默认值。</param>
            <returns>返回当前数据行某的整型值。</returns>
        </member>
        <member name="M:System.Data.DataRowExtentions.GetDecimalValue(System.Data.DataRow,System.String,System.Decimal)">
            <summary>
            获取当前数据行某的十进制值。
            </summary>
            <param name="dr">数据行对象实例。</param>
            <param name="colName">列名。</param>
            <param name="defaultValue">默认值。</param>
            <returns>返回当前数据行某的十进制值。</returns>
        </member>
        <member name="M:System.Data.DataRowExtentions.GetDateTimeValue(System.Data.DataRow,System.String)">
            <summary>
            获取当前数据行某的日期时间型值。
            </summary>
            <param name="dr">数据行对象实例。</param>
            <param name="colName">列名。</param>
            <returns>返回当前数据行某的日期时间型值。</returns>
        </member>
        <member name="M:System.Data.DataRowExtentions.GetDateTimeValue(System.Data.DataRow,System.String,System.Nullable{System.DateTime})">
            <summary>
            获取当前数据行某的日期时间型值。
            </summary>
            <param name="dr">数据行对象实例。</param>
            <param name="colName">列名。</param>
            <returns>返回当前数据行某的日期时间型值。</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.ToList``1(System.Data.DataSet)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.ToList``1(System.Data.DataTable,System.Boolean)">
            <summary>
            转换成List
            </summary>
            <typeparam name="TResult">返回实体对象类</typeparam>
            <param name="dt"></param>
            <param name="isClose">是否释放DataTable</param>
            <returns>返回List对象</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.ToList``1(System.Data.DataTable)">
            <summary>
            转换成List(不释放DataTable)
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dt"></param>
            <returns>返回List对象</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.FirstOrDefault``1(System.Data.DataSet)">
            <summary>
            得到第一条数据并转换成实体类型
            </summary>
            <typeparam name="TResult">返回的实体对象的类型</typeparam>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.FirstOrDefault``1(System.Data.DataTable)">
            <summary>
            得到第一条数据并转换成实体类型
            </summary>
            <typeparam name="TResult">返回的实体对象的类型</typeparam>
            <param name="dt"></param>
            <returns>实体对象</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.ElementAtOrDefault``1(System.Data.DataSet,System.Int32)">
            <summary>
            得到指定索引的数据并转换成实体类型
            </summary>
            <typeparam name="TResult">返回实体对象类</typeparam>
            <param name="ds"></param>
            <param name="index">索引</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.ElementAtOrDefault``1(System.Data.DataTable,System.Int32)">
            <summary>
            得到指定索引的数据并转换成实体类型
            </summary>
            <typeparam name="TResult">返回实体对象类</typeparam>
            <param name="dt"></param>
            <param name="index">索引</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.ToBulkCopy(System.Data.DataTable,BestWise.Common.DBUtility.SqlBulkCopyInfo)">
            <summary>
            将当前 DataTable 批量写入到数据库。
            </summary>
            <param name="dataTable">当前 DataTable 对象实例。</param>
            <param name="sqlBulkCopyInfo">批量写入信息对象实例。</param>
            <returns>返回是否写入成功。</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.BatchUpdate(System.Data.DataTable,BestWise.Common.DBUtility.SqlBulkCopyInfo)">
            <summary>
            批量更新数据表。
            </summary>
            <param name="dataTable">更新数据记录</param>
            <param name="sqlBulkCopyInfo">批量更新信息对象实例。</param>
            <returns>返回是否更新成功。</returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.JoinDataTables(System.Data.DataTable,System.Data.DataTable,System.Func{System.Data.DataRow,System.Data.DataRow,System.Boolean}[])">
            <summary>
            表连接操作
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="joinOn"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.DataTableExtentions.ListToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将泛类型集合List类转换成DataTable
            </summary>
            <param name="list">泛类型集合</param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.DataTableEntityBuilder`1.CreateBuilder(System.Data.DataRow)">
            <summary>
            本方法的转换为一对一的数据类型
            </summary>
            <param name="dataRecord"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IDataReaderExtentions.FirstOrDefault``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dr"></param>
            <param name="isClose"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IDataReaderExtentions.FirstOrDefault``1(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IDataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dr"></param>
            <param name="isClose"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IDataReaderExtentions.ToList``1(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DBUtility.ObjectProperty.GetProperties(System.Type)">
            <summary> 获取一个类中的所有公开实例属性和它们的Set方法委托
            </summary>
        </member>
        <member name="M:BestWise.Common.DBUtility.ObjectProperty.CreateSetter(System.Reflection.PropertyInfo)">
            <summary> 创建指定属性的Set方法委托
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.ObjectProperty.Info">
            <summary> 属性信息
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.ObjectProperty.Setter">
            <summary> Set方法委托
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.ObjectProperty.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="T:BestWise.Common.DBUtility.PagedDbHelper">
            <summary>
            分页查询辅助类
            </summary>
        </member>
        <member name="M:BestWise.Common.DBUtility.PagedDbHelper.GetSqlStringByPaged(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            获取分页查询的 SQL 语句。 
            </summary>
            <param name="tableName">数据表名。</param>
            <param name="keyField">主键字段名</param>
            <param name="fldNames">查询返回的字段名字符串</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页最大记录数</param>
            <param name="filter">筛选条件</param>
            <param name="sort">排序规则</param>
            <returns>返回分页查询的 SQL 语句。</returns>
        </member>
        <member name="M:BestWise.Common.DBUtility.PagedDbHelper.GetReverseOrderBySort(System.String)">
            <summary>
            反转排序规则
            </summary>
            <param name="sort">排序规则</param>
            <returns>返回反转后排序规则</returns>
        </member>
        <member name="T:BestWise.Common.DBUtility.PubConstant">
            <summary>
            公共工具类
            </summary>
        </member>
        <member name="M:BestWise.Common.DBUtility.PubConstant.GetConnectionString(System.String)">
            <summary>
            动态得到web.config里配置项的数据库连接字符串。
            </summary>
            <param name="configName"></param>
            <returns></returns>
        </member>
        <member name="P:BestWise.Common.DBUtility.PubConstant.ConnectionString">
            <summary>
            获取固定连接字符串
            </summary>
        </member>
        <member name="T:BestWise.Common.DBUtility.SqlBulkCopyInfo">
            <summary>
            批量写入信息类。
            </summary>
        </member>
        <member name="F:BestWise.Common.DBUtility.SqlBulkCopyInfo.SqlRowsCopied">
            <summary>
            在每次处理完 NotifyAfter 属性指定的行数时发生。
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.SqlBulkCopyInfo.Connection">
            <summary>
            将用于执行批量复制操作的已经打开的 SqlConnection 实例。
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.SqlBulkCopyInfo.Transaction">
            <summary>
            枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.SqlBulkCopyInfo.SqlBulkCopyOptions">
            <summary>
            枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.SqlBulkCopyInfo.Timeout">
            <summary>
            超时之前操作完成所需要的秒数
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.SqlBulkCopyInfo.BatchSize">
            <summary>
            每一批次中的行数，在每一批次结束时，将该批次的行发送到服务器。
            </summary>
        </member>
        <member name="P:BestWise.Common.DBUtility.SqlBulkCopyInfo.NotifyAfter">
            <summary>
            定义在生成通知事件之前要处理的行数。
            </summary>
        </member>
        <member name="T:BestWise.Common.DEncrypt.DEncrypt">
            <summary>
            Encrypt 的摘要说明。
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Encrypt(System.String)">
            <summary>
            使用缺省密钥字符串加密string
            </summary>
            <param name="original">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Decrypt(System.String)">
            <summary>
            使用缺省密钥字符串解密string
            </summary>
            <param name="original">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用给定密钥字符串加密string
            </summary>
            <param name="original">原始文字</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Decrypt(System.String,System.String)">
            <summary>
            使用给定密钥字符串解密string
            </summary>
            <param name="original">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用给定密钥字符串解密string,返回指定编码方式明文
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>明文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Decrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            使用缺省密钥字符串解密byte[]
            </summary>
            <param name="encrypted">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Encrypt(System.Byte[],System.Text.Encoding)">
            <summary>
            使用缺省密钥字符串加密
            </summary>
            <param name="original">原始数据</param>
            <returns>密文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.MakeMD5(System.Byte[])">
            <summary>
            生成MD5摘要
            </summary>
            <param name="original">数据源</param>
            <returns>摘要</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥加密
            </summary>
            <param name="original">明文</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DEncrypt.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥解密数据
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="T:BestWise.Common.DEncrypt.DESEncrypt">
            <summary>
            DES加密/解密类。
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESEncrypt.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESEncrypt.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text">原始文字</param>
            <returns>密文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESEncrypt.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary> 
            加密数据 
            </summary> 
            <param name="Text">原始文字</param> 
            <param name="sKey">密钥</param> 
            <returns>密文</returns> 
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESEncrypt.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESEncrypt.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary> 
            解密数据 
            </summary> 
            <param name="Text">密文</param> 
            <param name="sKey">密钥</param> 
            <returns>明文</returns> 
        </member>
        <member name="T:BestWise.Common.DEncrypt.DESOfJS">
            <summary>
            配合JS用的C#版DES加解密方法
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESOfJS.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text">原始文字</param>
            <returns>密文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESOfJS.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESOfJS.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="Text">密文</param> 
            <param name="sKey">密钥</param> 
            <returns>明文</returns> 
        </member>
        <member name="M:BestWise.Common.DEncrypt.DESOfJS.DES(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            加解密主调方法
            </summary>
            <param name="beinetkey">密钥</param>
            <param name="message">加密时为string，解密时为byte[]</param>
            <param name="encrypt">true：加密；false：解密</param>
            <param name="mode">true：CBC mode；false：非CBC mode</param>
            <param name="iv">初始化向量</param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.DEncrypt.HashEncode">
            <summary>
            得到随机安全码（哈希加密）。
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.HashEncode.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.HashEncode.GetSecurity">
            <summary>
            得到随机哈希加密字符串
            </summary>
            <returns>得到随机哈希加密字符串</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.HashEncode.GetRandomValue">
            <summary>
            得到一个随机数值
            </summary>
            <returns>得到一个随机数值</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.HashEncode.HashEncoding(System.String)">
            <summary>
            哈希加密一个字符串
            </summary>
            <param name="Security">哈希加密的字符串</param>
            <returns>哈希加密后字符串</returns>
        </member>
        <member name="T:BestWise.Common.DEncrypt.MD5">
            <summary>
            MD5加密类。
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.MD5.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.MD5.Encrypt(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="Text">原始文字</param>
            <returns>密文</returns>
        </member>
        <member name="T:BestWise.Common.DEncrypt.RSACryption">
            <summary> 
            RSA加密解密及RSA签名和验证
            </summary> 
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥 
            </summary>
            <param name="xmlKeys">私钥</param>
            <param name="xmlPublicKey">公钥</param>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA的加密字符串函数
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="m_strEncryptString">要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.RSAEncrypt(System.String,System.Byte[])">
            <summary>
            RSA的加密字节数组函数
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="EncryptString">加密字节数组</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.RSADecrypt(System.String,System.String)">
            <summary>
            RSA的字符串解密函数
            </summary>
            <param name="xmlPrivateKey">私钥</param>
            <param name="m_strDecryptString">解密字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.RSADecrypt(System.String,System.Byte[])">
            <summary>
            RSA的字节数组解密函数
            </summary>
            <param name="xmlPrivateKey">私钥</param>
            <param name="DecryptString">解密的字节数组</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.GetHash(System.String,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="m_strSource"></param>
            <param name="HashData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.GetHash(System.String,System.String@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="m_strSource"></param>
            <param name="strHashData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.GetHash(System.IO.FileStream,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="objFile"></param>
            <param name="HashData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.GetHash(System.IO.FileStream,System.String@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="objFile"></param>
            <param name="strHashData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureFormatter(System.String,System.Byte[],System.Byte[]@)">
            <summary>
            RSA签名
            </summary>
            <param name="p_strKeyPrivate"></param>
            <param name="HashbyteSignature"></param>
            <param name="EncryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureFormatter(System.String,System.Byte[],System.String@)">
            <summary>
            RSA签名
            </summary>
            <param name="p_strKeyPrivate"></param>
            <param name="HashbyteSignature"></param>
            <param name="m_strEncryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureFormatter(System.String,System.String,System.Byte[]@)">
            <summary>
            RSA签名
            </summary>
            <param name="p_strKeyPrivate"></param>
            <param name="m_strHashbyteSignature"></param>
            <param name="EncryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureFormatter(System.String,System.String,System.String@)">
            <summary>
            RSA签名
            </summary>
            <param name="p_strKeyPrivate"></param>
            <param name="m_strHashbyteSignature"></param>
            <param name="m_strEncryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureDeformatter(System.String,System.Byte[],System.Byte[])">
            <summary>
            RSA 签名验证
            </summary>
            <param name="p_strKeyPublic"></param>
            <param name="HashbyteDeformatter"></param>
            <param name="DeformatterData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureDeformatter(System.String,System.String,System.Byte[])">
            <summary>
            RSA 签名验证
            </summary>
            <param name="p_strKeyPublic"></param>
            <param name="p_strHashbyteDeformatter"></param>
            <param name="DeformatterData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureDeformatter(System.String,System.Byte[],System.String)">
            <summary>
            RSA 签名验证
            </summary>
            <param name="p_strKeyPublic"></param>
            <param name="HashbyteDeformatter"></param>
            <param name="p_strDeformatterData"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DEncrypt.RSACryption.SignatureDeformatter(System.String,System.String,System.String)">
            <summary>
            RSA 签名验证
            </summary>
            <param name="p_strKeyPublic"></param>
            <param name="p_strHashbyteDeformatter"></param>
            <param name="p_strDeformatterData"></param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.DirFile">
            <summary>
            文件操作夹
            </summary>
        </member>
        <member name="M:BestWise.Common.DirFile.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DirFile.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:BestWise.Common.DirFile.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.Contains(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.Contains(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param> 
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:BestWise.Common.DirFile.CreateDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dir">要创建的目录路径包括目录名</param>
        </member>
        <member name="M:BestWise.Common.DirFile.DeleteDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="dir">要删除的目录路径和名称</param>
        </member>
        <member name="M:BestWise.Common.DirFile.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="file">要删除的文件路径和名称</param>
        </member>
        <member name="M:BestWise.Common.DirFile.DeleteFile(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个文件
            </summary>
            <param name="file">要删除的文件路径数组和名称</param>
        </member>
        <member name="M:BestWise.Common.DirFile.CreateFile(System.String,System.String)">
            <summary>
            创建文件
            </summary>
            <param name="dir">带后缀的文件名</param>
            <param name="pagestr">文件内容</param>
        </member>
        <member name="M:BestWise.Common.DirFile.MoveFile(System.String,System.String)">
            <summary>
            移动文件(剪贴--粘贴)
            </summary>
            <param name="dir1">要移动的文件的路径及全名(包括后缀)</param>
            <param name="dir2">文件移动到新的位置,并指定新的文件名</param>
        </member>
        <member name="M:BestWise.Common.DirFile.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="dir1">要复制的文件的路径已经全名(包括后缀)</param>
            <param name="dir2">目标位置,并指定新的文件名</param>
        </member>
        <member name="M:BestWise.Common.DirFile.CopyFile2(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="dir1">要复制的文件的路径已经全名(包括后缀)</param>
            <param name="dir2">目标位置,并指定新的文件名</param>
        </member>
        <member name="M:BestWise.Common.DirFile.GetDateDir">
            <summary>
            根据时间得到目录名yyyyMMdd
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DirFile.GetDateFile">
            <summary>
            根据时间得到文件名HHmmssff
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.DirFile.CopyFolder(System.String,System.String)">
            <summary>
            复制文件夹(递归)
            </summary>
            <param name="varFromDirectory">源文件夹路径</param>
            <param name="varToDirectory">目标文件夹路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.ExistsFile(System.String)">
            <summary>
            检查文件,如果文件不存在则创建  
            </summary>
            <param name="FilePath">路径,包括文件名</param>
        </member>
        <member name="M:BestWise.Common.DirFile.DeleteFolderFiles(System.String,System.String)">
            <summary>
            删除指定文件夹对应其他文件夹里的文件
            </summary>
            <param name="varFromDirectory">指定文件夹路径</param>
            <param name="varToDirectory">对应其他文件夹路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.GetFileName(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.CreateDirectory(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.CreateDirectory2(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.CreateFile(System.String)">
            <summary>
            创建一个文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.CreateFile(System.String,System.Byte[])">
            <summary>
            创建一个文件,并将字节流写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="buffer">二进制流数据</param>
        </member>
        <member name="M:BestWise.Common.DirFile.GetLineCount(System.String)">
            <summary>
            获取文本文件的行数
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.GetFileSize(System.String)">
            <summary>
            获取一个文件的长度,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:BestWise.Common.DirFile.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:BestWise.Common.DirFile.AppendText(System.String,System.String)">
            <summary>
            向文本文件的尾部追加内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">写入的内容</param>
        </member>
        <member name="M:BestWise.Common.DirFile.Copy(System.String,System.String)">
            <summary>
            将源文件的内容复制到目标文件中
            </summary>
            <param name="sourceFilePath">源文件的绝对路径</param>
            <param name="destFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.Move(System.String,System.String)">
            <summary>
            将文件移动到指定目录
            </summary>
            <param name="sourceFilePath">需要移动的源文件的绝对路径</param>
            <param name="descDirectoryPath">移动到的目录的绝对路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.GetFileNameNoExtension(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 不包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:BestWise.Common.DirFile.ClearDirectory(System.String)">
            <summary>
            清空指定目录下所有文件及子目录,但该目录依然保存.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.ClearFile(System.String)">
            <summary>
            清空文件内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:BestWise.Common.DirFile.DeleteDirectory(System.String)">
            <summary>
            删除指定目录及其所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="T:BestWise.Common.EnumExtentions">
            <summary>
            枚举的扩展方法。
            </summary>
        </member>
        <member name="M:BestWise.Common.EnumExtentions.GetName``1(``0)">
            <summary>
            获取当前枚举值的常数的名称。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="helper">当前枚举对象。</param>
            <returns>返回枚举的名称。</returns>
        </member>
        <member name="M:BestWise.Common.EnumExtentions.GetText``1(``0)">
            <summary>
            获取当前枚举值的显示文本。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="helper">当前枚举对象。</param>
            <returns>返回枚举的显示文本。</returns>
        </member>
        <member name="M:BestWise.Common.EnumExtentions.ToEnumByText``1(System.String)">
            <summary>
            将枚举的描述转换成等效的枚举对象。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="helper">枚举的常数名称或数值。</param>
            <returns>返回枚举对象。</returns>
        </member>
        <member name="M:BestWise.Common.EnumExtentions.ToEnum``1(System.String)">
            <summary>
            将枚举的常数名称或数值转换成等效的枚举对象。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="helper">枚举的常数名称或数值。</param>
            <returns>返回枚举对象。</returns>
        </member>
        <member name="M:BestWise.Common.EnumExtentions.ToEnum``1(System.Int32)">
            <summary>
            将数值转换成等效的枚举对象。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="helper">枚举的常数名称或数值。</param>
            <returns>返回枚举对象。</returns>
        </member>
        <member name="M:BestWise.Common.EnumExtentions.ToEnum``1(System.Decimal)">
            <summary>
            将数值转换成等效的枚举对象。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="helper">枚举的常数名称或数值。</param>
            <returns>返回枚举对象。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetNames``1">
            <summary>
            获取当前枚举类型中常数名称的数组。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <returns>返回常数名称的数组。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetValues``1">
            <summary>
            获取当前枚举类型中常数值的数组。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <returns>返回常数值的数组。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetList(System.Type)">
            <summary>
            获取当前枚举类型的所有枚举列表。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <returns>返回当前枚举类型的所有枚举列表。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetList``1">
            <summary>
            获取当前枚举类型的所有枚举列表。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <returns>返回当前枚举类型的所有枚举列表。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetDataFieldName``1(System.String,System.String,System.String)">
            <summary>
            通过枚举获取查询字段的文本值字段名串。（形如：CASE Sex WHEN 1 THEN '女' ELSE '男' END  AS Gender）。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="sourceDataFieldName">源字段名。</param>
            <param name="targetDataFieldName">目标字段名（默认与枚举类型同名）。</param>
            <param name="unknow">枚举以外值的文本。</param>
            <returns>返回枚举获取查询字段的文本值有字段名串。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetDataFieldName``1(System.String,System.String)">
            <summary>
            通过枚举获取查询字段的文本值字段名串。（形如：CASE Sex WHEN 1 THEN '女' ELSE '男' END  AS Gender）。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="sourceDataFieldName">源字段名。</param>
            <param name="targetDataFieldName">目标字段名（默认与枚举类型同名）。</param>
            <returns>返回枚举获取查询字段的文本值有字段名串。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetDataFieldName``1(System.String)">
            <summary>
            通过枚举获取查询字段的文本值字段名串。（形如：CASE Sex WHEN 1 THEN '女' ELSE '男' END  AS Gender）。
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="sourceDataFieldName">源字段名。</param>
            <returns>返回枚举获取查询字段的文本值有字段名串。</returns>
        </member>
        <member name="M:BestWise.Common.EnumHelper.GetDataFieldNameNotAs``1(System.String)">
            <summary>
            通过枚举获取查询字段的文本值字段名串。（形如：CASE Sex WHEN 1 THEN '女' ELSE '男' END ）。
            不带AS
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="sourceDataFieldName">源字段名。</param>
            <returns>返回枚举获取查询字段的文本值有字段名串。</returns>
        </member>
        <member name="M:BestWise.Common.AttachDataExtensions.GetExtendText(System.Enum)">
            <summary>
            获取枚举扩展标记内容
            </summary>
        </member>
        <member name="T:BestWise.Common.ExtendAttribute">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="T:BestWise.Common.Enums.DeviceType">
            <summary>
            设备类型
            </summary>
        </member>
        <member name="F:BestWise.Common.Enums.DeviceType.PC">
            <summary>
            PC设备
            </summary>
        </member>
        <member name="F:BestWise.Common.Enums.DeviceType.PHONE">
            <summary>
            手机设备
            </summary>
        </member>
        <member name="F:BestWise.Common.Enums.DeviceType.PAD">
            <summary>
            pad设备
            </summary>
        </member>
        <member name="M:BestWise.Common.NotFoundException.#ctor(System.String,System.Uri,System.Net.HttpStatusCode)">
            <summary>
            构造方法。
            </summary>
            <param name="message"></param>
            <param name="requestUri"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:BestWise.Common.NotFoundException.#ctor(System.String,System.Uri)">
            <summary>
            构造方法。
            </summary>
            <param name="message"></param>
            <param name="requestUri"></param>
        </member>
        <member name="P:BestWise.Common.NotFoundException.StatusCode">
            <summary>
            当前 HTTP 响应状态。
            </summary>
        </member>
        <member name="P:BestWise.Common.NotFoundException.RequestUri">
            <summary>
            当前 HTTP 请求的 URI。
            </summary>
        </member>
        <member name="T:BestWise.Common.FileContentInfo">
            <summary>
            文件内容结果信息对象类
            </summary>
        </member>
        <member name="P:BestWise.Common.FileContentInfo.FileContents">
            <summary>
            要发送到响应的二进制内容。
            </summary>
        </member>
        <member name="P:BestWise.Common.FileContentInfo.ContentType">
            <summary>
            内容类型（MIME 类型）。
            </summary>
        </member>
        <member name="P:BestWise.Common.FileContentInfo.DownloadName">
            <summary>
            浏览器中显示的文件下载对话框内要使用的文件名。
            </summary>
        </member>
        <member name="F:BestWise.Common.HttpWebSocket.ErrorMessageSeparate">
            <summary>
            获取或设置错误信息分隔符
            </summary>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetImageUseSocket(System.String,System.String,System.String)">
            <summary>
            get或post方式请求一个 http 或 https 地址.使用 Socket 方式
            </summary>
            <param name="url">请求绝对地址</param>
            <param name="referer">请求来源地址,可为空</param>
            <param name="postData">post请求参数. 设置空值为get方式请求</param>
            <returns>返回图像</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetHtmlUseSocket(System.String,System.String)">
            <summary>
            get或post方式请求一个 http 或 https 地址.使用 Socket 方式
            </summary>
            <param name="url">请求绝对地址</param>
            <param name="postData">post请求参数. 设置空值为get方式请求</param>
            <returns>返回 html 内容,如果发生异常将返回上次http状态码及异常信息</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetHtmlUseSocket(System.String,System.String,System.String)">
            <summary>
            get或post方式请求一个 http 或 https 地址.使用 Socket 方式
            </summary>
            <param name="url">请求绝对地址</param>
            <param name="referer">请求来源地址,可为空</param>
            <param name="postData">post请求参数. 设置空值为get方式请求</param>
            <returns>返回 html 内容,如果发生异常将返回上次http状态码及异常信息</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetSocketResult(System.String,System.String,System.String)">
            <summary>
            get或post方式请求一个 http 或 https 地址.
            </summary>
            <param name="url">请求绝对地址</param>
            <param name="referer">请求来源地址,可为空</param>
            <param name="postData">post请求参数. 设置空值为get方式请求</param>
            <returns>返回的已解压的数据内容</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetHttpResult(System.Uri,System.String,System.String)">
            <summary>
            get或post方式请求一个 http 地址.
            </summary>
            <param name="uri">请求绝对地址</param>
            <param name="referer">请求来源地址,可为空</param>
            <param name="postData">post请求参数. 设置空值为get方式请求</param>
            <param name="headText">输出包含头部内容的StringBuilder</param>
            <returns>返回未解压的数据流</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetSslResult(System.Uri,System.String,System.String)">
            <summary>
            get或post方式请求一个 https 地址.
            </summary>
            <param name="uri">请求绝对地址</param>
            <param name="referer">请求来源地址,可为空</param>
            <param name="postData">post请求参数. 设置空值为get方式请求</param>
            <param name="headText">输出包含头部内容的StringBuilder</param>
            <returns>返回未解压的数据流</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetSendHeaders(System.Uri,System.String,System.String)">
            <summary>
            返回请求的头部内容
            </summary>
            <param name="uri">请求绝对地址</param>
            <param name="referer">请求来源地址,可为空</param>
            <param name="postData">post请求参数. 设置空值为get方式请求</param>
            <returns>请求头部数据</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.SetThisHeaders(System.String)">
            <summary>
            设置此类的字段
            </summary>
            <param name="headText">头部文本</param>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.unGzip(System.IO.MemoryStream)">
            <summary>
            解压数据流
            </summary>
            <param name="data">数据流, 压缩或未压缩的.</param>
            <returns>返回解压缩的数据流</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.ProcessData``1(``0,System.IO.MemoryStream@)">
            <summary>
            处理请求返回的数据.
            </summary>
            <typeparam name="T">数据源类型</typeparam>
            <param name="reader">数据源实例</param>
            <param name="body">保存数据的流</param>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetHeaders``1(``0,System.Byte[]@,System.Int32@)">
            <summary>
            取得返回的http头部内容,并设置相关属性.
            </summary>
            <typeparam name="T">数据源类型</typeparam>
            <param name="reader">数据源实例</param>
            <param name="data">待处理的数据</param>
            <param name="readLength">读取的长度</param>
            <returns>数据内容的起始位置,返回-1表示未读完头部内容</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetBodyData``1(``0,System.Byte[]@,System.Int32,System.Int32,System.IO.MemoryStream@)">
            <summary>
            取得未分块数据的内容
            </summary>
            <typeparam name="T">数据源类型</typeparam>
            <param name="reader">数据源实例</param>
            <param name="data">已读取未处理的字节数据</param>
            <param name="startIndex">起始位置</param>
            <param name="readLength">读取的长度</param>
            <param name="body">保存块数据的流</param>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetChunkData``1(``0,System.Byte[]@,System.Int32@,System.Int32@,System.IO.MemoryStream@)">
            <summary>
            取得分块数据
            </summary>
            <typeparam name="T">数据源类型</typeparam>
            <param name="reader">Socket实例</param>
            <param name="data">已读取未处理的字节数据</param>
            <param name="startIndex">起始位置</param>
            <param name="readLength">读取的长度</param>
            <param name="body">保存块数据的流</param>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetChunkHead``1(``0,System.Byte[]@,System.Int32@,System.Int32@)">
            <summary>
            取得分块数据的数据长度
            </summary>
            <typeparam name="T">数据源类型</typeparam>
            <param name="reader">Socket实例</param>
            <param name="data">已读取未处理的字节数据</param>
            <param name="startIndex">起始位置</param>
            <param name="readLength">读取的长度</param>
            <returns>块长度,返回0表示已到末尾.</returns>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.GetChunkBody``1(``0,System.Byte[]@,System.Int32@,System.Int32@,System.IO.MemoryStream@,System.Int32)">
            <summary>
            取得分块传回的数据内容
            </summary>
            <typeparam name="T">数据源类型</typeparam>
            <param name="reader">Socket实例</param>
            <param name="data">已读取未处理的字节数据</param>
            <param name="startIndex">起始位置</param>
            <param name="readLength">读取的长度</param>
            <param name="body">保存块数据的流</param>
            <param name="chunkSize">块长度</param>
        </member>
        <member name="M:BestWise.Common.HttpWebSocket.ReadData``1(``0,System.Byte[]@)">
            <summary>
            从数据源读取数据
            </summary>
            <typeparam name="T">数据源类型</typeparam>
            <param name="reader">数据源</param>
            <param name="data">用于存储读取的数据</param>
            <returns>读取的数据长度,无数据为-1</returns>
        </member>
        <member name="P:BestWise.Common.HttpWebSocket.TimeOut">
            <summary>
            获取或设置请求与回应的超时时间,默认3秒.
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpWebSocket.Cookies">
            <summary>
            获取或设置请求cookie
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpWebSocket.HttpHeaders">
            <summary>
            获取请求返回的 HTTP 头部内容
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpHeader.ResponseStatusCode">
            <summary>
            获取请求回应状态码
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpHeader.Location">
            <summary>
            获取跳转url
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpHeader.IsGzip">
            <summary>
            获取是否由Gzip压缩
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpHeader.ContentType">
            <summary>
            获取返回的文档类型
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpHeader.Charset">
            <summary>
            获取内容使用的字符集
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpHeader.ContentLength">
            <summary>
            获取内容长度
            </summary>
        </member>
        <member name="P:BestWise.Common.HttpHeader.IsChunk">
            <summary>
            获取是否分块传输
            </summary>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.Exist(System.String)">
            <summary>
            缓存是否存在key的value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.Remove(System.String)">
            <summary>
            根据key删除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.Store``1(System.String,``0)">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.Store``1(System.String,``0,System.DateTime)">
            <summary>
            添加缓存(默认滑动时间为20分钟)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration">绝对过期时间</param>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.Store``1(System.String,``0,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.Retrieve``1(System.String)">
            <summary>
            获得key对应的value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.GetAllKeys">
            <summary>
            获取所有的缓存key
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ICacheStorage.Flush">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:BestWise.Common.Identity.PasswordSalter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BestWise.Common.Identity.PasswordSalter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BestWise.Common.Identity.PasswordSalter.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="passwordSalt"></param>
        </member>
        <member name="M:BestWise.Common.Identity.PasswordSalter.EncodePassword(System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.Identity.PasswordSalter.GeneratePasswordSalt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.Identity.PasswordSalter.HashPassword(System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.Identity.PasswordSalter.VerifyHashedPassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="hashedPassword"></param>
            <param name="providedPassword"></param>
            <returns></returns>
        </member>
        <member name="P:BestWise.Common.Identity.PasswordSalter.PasswordSalt">
            <summary>
            
            </summary>
        </member>
        <member name="T:BestWise.Common.Identity.PasswordVerificationResult">
            <summary>
            密码验证返回对象实体类
            </summary>
        </member>
        <member name="F:BestWise.Common.Identity.PasswordVerificationResult.Failed">
            <summary>
            密码验证失败
            </summary>
        </member>
        <member name="F:BestWise.Common.Identity.PasswordVerificationResult.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:BestWise.Common.Identity.PasswordVerificationResult.SuccessRehashNeeded">
            <summary>
            成功但应更新密码并重新经过哈希处理
            </summary>
        </member>
        <member name="T:BestWise.Common.ImageHelper">
            <summary>
            图片帮助类
            </summary>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Base64DecodeString(System.String)">
            <summary>
            将Base64转为换二进制
            </summary>
            <param name="inputStr"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.SetImagePropertys(System.Byte[],System.String,BestWise.Common.ImagePropertyCollection)">
            <summary>
            设置图片的属性。
            </summary>
            <param name="bytes">图片的字节数组。</param>
            <param name="extension">图片的扩展名。</param>
            <param name="propertys">图片的属性字典。</param>
            <returns>返回图片的字节数组。</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.FormatDescription(System.String)">
            <summary>
            根据图片文件扩展名得到图片的 FormatDescription
            </summary>
            <param name="extension">图片文件扩展名</param>
            <returns>图片的 FormatDescription</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Zoom(System.String,System.IO.Stream,System.Drawing.Size)">
            <summary>
            图片等比例缩放
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="stream">原图的文件数据流</param>
            <param name="size">缩放图片最大 Size</param>
            <returns>缩放后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Zoom(System.String,System.IO.Stream,System.Drawing.Size,System.Int32)">
            <summary>
            图片等比例缩放
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="stream">原图的文件数据流</param>
            <param name="size">缩放图片最大 Size</param>
            <param name="quality">处理后图片的品质</param>
            <returns>缩放后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Zoom(System.String,System.Byte[],System.Drawing.Size)">
            <summary>
            图片等比例缩放
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="bytes">原图的二进制数据</param>
            <param name="size">缩放图片最大 Size</param>
            <returns>缩放后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Zoom(System.String,System.Byte[],System.Drawing.Size,System.Int32)">
            <summary>
            图片等比例缩放
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="bytes">原图的二进制数据</param>
            <param name="size">缩放图片最大 Size</param>
            <param name="quality">处理后图片的品质</param>
            <returns>缩放后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Crop(System.String,System.IO.Stream,System.Drawing.Size)">
            <summary>
            最大适应裁剪图片
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="stream">原图的文件数据流</param>
            <param name="size">裁剪后图片的 Size</param>
            <returns>裁剪后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Crop(System.String,System.IO.Stream,System.Drawing.Size,System.Int32)">
            <summary>
            最大适应裁剪图片
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="stream">原图的文件数据流</param>
            <param name="size">裁剪后图片的 Size</param>
            <param name="quality">处理后图片的品质</param>
            <returns>裁剪后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Crop(System.String,System.Byte[],System.Drawing.Size)">
            <summary>
            最大适应裁剪图片
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="bytes">原图的二进制数据</param>
            <param name="size">裁剪后图片的 Size</param>
            <returns>裁剪后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.Crop(System.String,System.Byte[],System.Drawing.Size,System.Int32)">
            <summary>
            最大适应裁剪图片
            </summary>
            <param name="fileName">图片文件名</param>
            <param name="bytes">原图的二进制数据</param>
            <param name="size">裁剪后图片的 Size</param>
            <param name="quality">处理后图片的品质</param>
            <returns>裁剪后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.IO.Stream)">
            <summary>
            转换图片格式
            </summary>
            <param name="stream">原图的文件数据流</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.Byte[])">
            <summary>
            转换图片格式
            </summary>
            <param name="bytes">原图的二进制数据</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.Byte[],System.String)">
            <summary>
            转换图片格式
            </summary>
            <param name="bytes">原图的二进制数据</param>
            <param name="toExtension">转换后图片的扩展名</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.IO.Stream,System.String)">
            <summary>
            转换图片格式
            </summary>
            <param name="stream">原图的文件数据流</param>
            <param name="toExtension">转换后图片的扩展名</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.IO.Stream,System.Int32)">
            <summary>
            转换图片格式
            </summary>
            <param name="stream">原图的文件数据流</param>
            <param name="quality">处理后图片的品质</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.Byte[],System.Int32)">
            <summary>
            转换图片格式
            </summary>
            <param name="bytes">原图的二进制数据</param>
            <param name="quality">处理后图片的品质</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.Byte[],System.String,System.Int32)">
            <summary>
            转换图片格式
            </summary>
            <param name="bytes">原图的二进制数据</param>
            <param name="toExtension">转换后图片的扩展名</param>
            <param name="quality">处理后图片的品质</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ConvertImageFormat(System.IO.Stream,System.String,System.Int32)">
            <summary>
            转换图片格式
            </summary>
            <param name="stream">原图的文件数据流</param>
            <param name="toExtension">转换后图片的扩展名</param>
            <param name="quality">处理后图片的品质</param>
            <returns>转换后图片的二进制数据</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ToBytes(System.Drawing.Image,System.String,System.Int32)">
            <summary>
            将图片对象实例转换成字节数组。
            </summary>
            <param name="image">图片对象实例。</param>
            <param name="toExtension">图片的扩展名。</param>
            <param name="quality">处理后图片的品质</param>
            <returns>返回字节数组。</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.ToBytes(System.Drawing.Image,System.String)">
            <summary>
            将图片对象实例转换成字节数组。
            </summary>
            <param name="image">图片对象实例。</param>
            <param name="toExtension">图片的扩展名。</param>
            <returns>返回字节数组。</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetSize(System.String)">
            <summary>
            得到图片的 Size 值
            </summary>
            <param name="base64String">图片的 base64 字符数据</param>
            <returns>图片的 Size 值</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetSize(System.Byte[])">
            <summary>
            得到图片的 Size 值
            </summary>
            <param name="bytes">图片的二进制数据</param>
            <returns>图片的 Size 值</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetSize(System.IO.Stream)">
            <summary>
            得到图片的 Size 值
            </summary>
            <param name="stream">图片的文件数据流</param>
            <returns>图片的 Size 值</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetPropertyItemsString(System.Drawing.Imaging.PropertyItem[])">
            <summary>
            
            </summary>
            <param name="propertyItems"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetPropertyItem(BestWise.Common.ImageProperty,System.String)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetImage(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetBitmap(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetEmptyBytes">
            <summary>
            得到空图片的字节数组。
            </summary>
            <returns>返回空图片的字节数组。</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetHost">
            <summary>
            获取图片的 cdn 主机域名
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.IsCdnImage(System.String)">
            <summary>
            是否为 Cdn 图片
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.IsNetPath(System.String)">
            <summary>
            是否是网络路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.IsOldImage(System.String)">
            <summary>
            判断该路径是否是老路径
            </summary>
            <param name="url">图片/文件路径</param>
            <returns>是否是老路径</returns>
        </member>
        <member name="M:BestWise.Common.ImageHelper.GetImageUrl(System.String)">
            <summary>
            得到图片的 cdn 绝对 URL 地址
            </summary>
            <param name="url">URL 地址</param>
            <returns>图片的 cdn 绝对 URL 地址</returns>
        </member>
        <member name="T:BestWise.Common.ImageProperty">
            <summary>
            图片的属性。
            </summary>
        </member>
        <member name="F:BestWise.Common.ImageProperty.Title">
            <summary>
            标题。
            </summary>
        </member>
        <member name="F:BestWise.Common.ImageProperty.Make">
            <summary>
            照相机制造商。
            </summary>
        </member>
        <member name="F:BestWise.Common.ImageProperty.Model">
            <summary>
            照相机型号。
            </summary>
        </member>
        <member name="F:BestWise.Common.ImageProperty.Software">
            <summary>
            程序名称。
            </summary>
        </member>
        <member name="F:BestWise.Common.ImageProperty.DateTime">
            <summary>
            拍摄日期时间。
            </summary>
        </member>
        <member name="F:BestWise.Common.ImageProperty.Artist">
            <summary>
            作者。
            </summary>
        </member>
        <member name="F:BestWise.Common.ImageProperty.Copyright">
            <summary>
            版权
            </summary>
        </member>
        <member name="M:BestWise.Common.IPManager.GetModel">
            <summary>
            根据ip获取城市数据
            </summary>
        </member>
        <member name="M:BestWise.Common.IPManager.GetIPAddress">
            <summary>
            得到客户端IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.IPManager.GetIP">
            <summary>
            获取本机对外IP
            </summary>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.IPResult">
            <summary>
            ip返回类
            </summary>
        </member>
        <member name="P:BestWise.Common.IPResult.Code">
            <summary>
            状态，0：成功，1：失败
            </summary>
        </member>
        <member name="P:BestWise.Common.IPResult.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:BestWise.Common.IPData">
            <summary>
            ip数据
            </summary>
        </member>
        <member name="P:BestWise.Common.IPData.IP">
            <summary>
            返回IP
            </summary>
        </member>
        <member name="P:BestWise.Common.IPData.Region">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:BestWise.Common.IPData.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:BestWise.Common.IPData.County">
            <summary>
            县区
            </summary>
        </member>
        <member name="F:BestWise.Common.Constants.SHA1OID">
            <summary>
            得到签名加密算法的对象标识符(OID)。
            </summary>
        </member>
        <member name="T:BestWise.Common.PubConstants">
            <summary>
            
            </summary>
        </member>
        <member name="P:BestWise.Common.PubConstants.DefaultJsonSerializerSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JsonDateTimeConverter">
            <summary>
            将日期时间型序列化成时间戳。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JsonDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JsonDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSignIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.SignContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="T:BestWise.Common.SignRequest">
            <summary>
            带签名的请求。
            </summary>
        </member>
        <member name="M:BestWise.Common.SignRequest.Verify">
            <summary>
            验证签名。
            </summary>
            <returns>返回签名是否通过验证。</returns>
        </member>
        <member name="P:BestWise.Common.SignRequest.Sign">
            <summary>
            请求数据签名。&lt;br /&gt;&lt;em class="text-warning" &gt;该值为：除本属性以外其他属性，进行 JSON 格式（以 key 的升序排列）序列化后，进行 MD5 后的值。&lt;/em/&gt;
            </summary>
        </member>
        <member name="T:Logger">
            <summary>
            Logger 的摘要说明
            </summary>
        </member>
        <member name="M:Logger.LogMessage(System.String)">
            <summary>
            记录消息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Logger.LogException(System.Exception)">
            <summary>
            记录异常信息
            </summary>
            <param name="exp">异常</param>
        </member>
        <member name="M:Logger.DebugTime(System.String,System.Exception)">
            <summary>
            记录消息和异常
            </summary>
            <param name="note">消息</param>
            <param name="exp">异常</param>
        </member>
        <member name="P:BestWise.Common.Model.BaseDataPaging.PageIndex">
            <summary>
            真实分页号
            </summary>
        </member>
        <member name="P:BestWise.Common.Model.BaseDataPaging.PageSize">
            <summary>
            真实分页大小
            </summary>
        </member>
        <member name="P:BestWise.Common.Model.BaseDataPaging.IsRetrograde">
            <summary>
            是否逆行查询
            </summary>
        </member>
        <member name="P:BestWise.Common.Model.BaseDataPaging.RealPageIndex">
            <summary>
            真实的启动条数
            </summary>
        </member>
        <member name="T:BestWise.Common.FileBaseInfo">
            <summary>
            文件的基本信息
            </summary>
        </member>
        <member name="P:BestWise.Common.FileBaseInfo.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:BestWise.Common.FileBaseInfo.ContentType">
            <summary>
            输出文件类型
            </summary>
        </member>
        <member name="P:BestWise.Common.FileBaseInfo.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.ChineseToNumber(System.String)">
            <summary>
            将中文数字替换为阿拉伯数字
            </summary>
            <param name="chinese">中文数字</param>
            <returns>返回阿拉伯数字</returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.ToRMB(System.Decimal,System.Int32)">
            <summary>
            获取人民币字符串。
            </summary>
            <param name="num">数值。</param>
            <param name="accuracy">精确小数位数</param>
            <returns>返回人民币字符串。</returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.ToRMB(System.Decimal)">
            <summary>
            获取人民币字符串。
            </summary>
            <param name="num">数值。</param>
            <returns>返回人民币字符串。</returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.ToEuro(System.Decimal,System.Int32)">
            <summary>
            获取欧元字符串。
            </summary>
            <param name="num">数值。</param>
            <param name="accuracy">精确小数位数</param>
            <returns>返回欧元字符串。</returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.ToEuro(System.Decimal)">
            <summary>
            获取欧元字符串。
            </summary>
            <param name="num">数值。</param>
            <returns>返回欧元字符串。</returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.ToChinese(System.Int32)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.ToChinese(System.Decimal)">
            <summary>
            
            </summary>
            <param name="ArabNum"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.GetDotPart(System.String)">
            <summary>
            处理小数部分
            </summary>
            <param name="dotPart"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.GetThousandPart(System.Int32)">
            <summary>
            万位以下的分析
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.HandlePart(System.String)">
            <summary>
            处理亿以下内容。
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.GetArabDotPart(System.String)">
            <summary>
            取得阿拉伯数字小数部分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.NumberExtentions.switchNum(System.String)">
            <summary>
            取得汉字对应的阿拉伯数字
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.ObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.SerializeJson``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.SerializeJson(System.Dynamic.DynamicObject)">
            <summary>
            
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.SaveJosn``1(``0,System.IO.FileInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper"></param>
            <param name="file"></param>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.SaveJosn``1(``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper"></param>
            <param name="file"></param>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ToXmlBytes(System.Object,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetBoolean(System.Object)">
            <summary>
            获取布尔型的值
            </summary>
            <param name="helper"></param>
            <returns>布尔型的值</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetString(System.Object)">
            <summary>
            得到字符串的值
            </summary>
            <param name="helper"></param>
            <returns>字符串的值</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetLong(System.Object)">
            <summary>
            获取长整型的值
            </summary>
            <param name="helper"></param>
            <returns>长整型的值</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetFloat(System.Object)">
            <summary>
            获取单精度浮点数
            </summary>
            <param name="helper"></param>
            <returns>单精度浮点数</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetDouble(System.Object)">
            <summary>
            获取双精度的值
            </summary>
            <param name="helper"></param>
            <returns>获取双精度的值</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetDecimal(System.Object)">
            <summary>
            获取十进制数的值
            </summary>
            <param name="helper"></param>
            <returns>获取十进制数的值</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetInt(System.Object)">
            <summary>
            获取整型的值
            </summary>
            <param name="helper"></param>
            <returns>整型的值</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetDateTime(System.Object)">
            <summary>
            得到DateTime值
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetGuid(System.Object)">
            <summary>
            得到Guid
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.EmptyDateTime(System.Object)">
            <summary>
            得到空日期值
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetAmount(System.Object)">
            <summary>
            获取金额字符串格式：12,345,678
            </summary>
            <param name="helper"></param>
            <returns>字符串</returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.GetValidSqlDateTime(System.DateTime)">
            <summary>
            将当前时间对象置为有效的SQL Server 时间。
            </summary>
            <param name="dateTime">当前时间对象。</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ColumnToInt(System.Object)">
            <summary>
            获取列整数值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ColumnToLong(System.Object)">
            <summary>
            获取列长整数值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ColumnToString(System.Object)">
            <summary>
            获取列字符串值
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ColumnToDateTime(System.Object)">
            <summary>
            获取列日期值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ColumnToDecimal(System.Object)">
            <summary>
            获取列货币值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ColumnToGuid(System.Object)">
            <summary>
            获取列GUID值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ObjectExtensions.ColumnToDouble(System.Object)">
            <summary>
            获取列Double值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:BestWise.Common.ObjectExtensions.DefaultXmlWriterSettings">
            <summary>
            序列化为 xml 的默认设置
            </summary>
        </member>
        <member name="T:BestWise.Common.PageInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:BestWise.Common.PageInfo.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:BestWise.Common.PageInfo.PageSize">
            <summary>
            每页显示的数据大小
            </summary>
        </member>
        <member name="T:BestWise.Common.PinyinHelper">
            <summary>
            拼音辅助类
            </summary>
        </member>
        <member name="M:BestWise.Common.PinyinHelper.GetPY(System.String)">
            <summary>
            取文文本的拼音首字母
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <returns>返回中文拼音首字母</returns>
        </member>
        <member name="M:BestWise.Common.PinyinHelper.GetPinyin(System.String)">
            <summary>
            取中文文本的拼音
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <returns>返回中文文本的拼音</returns>
        </member>
        <member name="M:BestWise.Common.PinyinHelper.GetPinyin(System.String,System.Text.Encoding)">
            <summary>
            取中文文本的拼音
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <param name="encoding">源文本的编码</param>
            <returns>返回encoding编码类型的中文文本的拼音</returns>
        </member>
        <member name="M:BestWise.Common.PinyinHelper.GetPinyin(System.Char)">
            <summary>
            返回单个字符的汉字拼音
            </summary>
            <param name="ch">编码为UTF8的中文字符</param>
            <returns>ch对应的拼音</returns>
        </member>
        <member name="M:BestWise.Common.PinyinHelper.ConvertEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            转换编码 
            </summary>
            <param name="text">文本</param>
            <param name="srcEncoding">源编码</param>
            <param name="dstEncoding">目标编码</param>
            <returns>目标编码文本</returns>
        </member>
        <member name="M:BestWise.Common.PinyinHelper.GetHashIndex(System.Char)">
            <summary>
            取文本索引值
            </summary>
            <param name="ch">字符</param>
            <returns>文本索引值</returns>
        </member>
        <member name="M:BestWise.Common.PinyinHelper.GetWb(System.String)">
            <summary>
            得到五笔
            </summary>
            <param name="inputstring"></param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.RandomUtil">
            <summary>
            生成随即字符串工具类
            </summary>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GetOneRandomNum(System.String)">
            <summary>
            根据格式取随机字符
            </summary>
            <param name="format">*:大写字母和数字随机组合;#:数字;$:大写字母</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GetRandomNum">
            <summary>
            生成随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GetRandomNum(System.Int32)">
            <summary>
            数字
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GetRandom(System.Int32)">
            <summary>
            大小写字母和数字随机组合
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GetRandomUpper(System.Int32)">
            <summary>
            大写字母
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GetRandomLetter(System.Int32)">
            <summary>
            大写字母
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GetRandomLower(System.Int32)">
            <summary>
            小写字母
            </summary>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.RandomUtil.GenerateOrderId">
            <summary>
            生成订单号
            </summary>
            <returns>订单号</returns>
        </member>
        <member name="F:BestWise.Common.RegexHelper.FullNickname">
            <summary>
            昵称全匹配正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.NotHasNickname">
            <summary>
            昵称不能有的字符正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.NICKNAME_REGULAR">
            <summary>
            验证昵称
            只包含中英数字
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.TELPHONE">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.PHONE_PATTREN">
            <summary>
            验证手机号码是否正确
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.ID_CARD">
            <summary>
            验证身份证号码是否正确
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.EMAIL">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.POSITIVE_INTEGER">
            <summary>
            正整数
            /// </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.ZIP_CODE">
            <summary>
            邮政编码
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.GREATER_THAN_ZERO">
            <summary>
            大于零的整数
            </summary>
        </member>
        <member name="F:BestWise.Common.RegexHelper.POSITIVE_FLOAT_POINT">
            <summary>
            匹配正浮点数
            </summary>
        </member>
        <member name="T:BestWise.Common.ResultMessage`1">
            <summary>
            操作结果消息（带业务数据）实体类
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.SucceedResult(System.String,`0)">
            <summary>
            获取成功的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="data">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.SucceedResult(`0)">
            <summary>
            获取成功的消息对象。
            </summary>
            <param name="data">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.ExistDataResult(`0)">
            <summary>
            获取数据已存在的消息对象。
            </summary>
            <param name="data">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.ExistDataResult(System.String,`0)">
            <summary>
            获取数据已存在的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="data">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.NonexistenceResult(System.String)">
            <summary>
            获取数据已存在的消息对象。
            </summary>
            <param name="message">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.NonexistenceResult(System.String,`0)">
            <summary>
            获取数据已存在的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="data">返回的业务数据。</param>
            <returns>返回成功的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.UnauthorizedResult(System.String)">
            <summary>
            获取未授权的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.UnauthorizedResult">
            <summary>
            获取未授权的消息对象。
            </summary>
            <returns>返回未授权的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.FailureResult(System.String)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.FailureResult(System.String,`0)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.FailureResult(System.Exception)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="exception">异常对象。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.FailureResult(System.Exception,`0)">
            <summary>
            获取失败的消息对象。
            </summary>
            <param name="exception">异常对象。</param>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.FailureResult">
            <summary>
            获取失败的消息对象。
            </summary>
            <returns>返回失败的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.InvalidResult(System.String,System.Collections.Generic.IList{BestWise.Common.ValidErrors})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.InvalidResult(System.Collections.Generic.IList{BestWise.Common.ValidErrors})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.InvalidResult(System.String,System.String,System.String)">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="field">参数名称。</param>
            <param name="errorMessage">参数的错误消息。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.InvalidResult(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            获取请求数据无效的消息对象。
            </summary>
            <param name="message">消息内容。</param>
            <param name="errors">参数错误消息队。</param>
            <returns>返回请求数据无效的消息对象。</returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.GetAsync(System.Func{`0})">
            <summary>
            
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.GetAsync(System.Func{`0},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.ResultMessage`1.ToApi">
            <summary>
            转换成 API 的返回结果对象实例
            </summary>
            <returns>返回API 的返回结果对象实例</returns>
        </member>
        <member name="P:BestWise.Common.ResultMessage`1.Data">
            <summary>
            操作结果业务数据
            </summary>
        </member>
        <member name="M:BestWise.Common.SearchCondition.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:BestWise.Common.SearchCondition.#ctor(System.Collections.Generic.List{BestWise.Common.SearchInfo},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="filter">筛选条件</param>
            <param name="sort">排序</param>
        </member>
        <member name="M:BestWise.Common.SearchCondition.GetSort``1">
            <summary>
            获取排序条件
            </summary>
            <typeparam name="TModel">操作对象</typeparam>
            <returns>返回排序条件</returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.GetSort">
            <summary>
            获取排序条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.GetFilter``1">
            <summary>
            获取筛选条件
            </summary>
            <typeparam name="TModel">操作对象</typeparam>
            <returns>返回筛选条件</returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.GetFilter">
            <summary>
            获取筛选条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.BuildGroupCondiction``1">
            <summary>
            建立分组条件
            </summary>
            <typeparam name="TModel">操作对象</typeparam>
            <returns>返回分组条件</returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.BuildGroupCondiction">
            <summary>
            建立分组条件
            </summary>
            <returns>返回分组条件</returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.GetGroupNames">
            <summary>
            获取给定条件集合的组别对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.ConvertSqlOperator(BestWise.Common.SqlOperator)">
            <summary>
            转换枚举类型为对应的Sql语句操作符号
            </summary>
            <param name="sqlOperator">SqlOperator枚举对象</param>
            <returns><![CDATA[对应的Sql语句操作符号（如 ">" "<>" ">=")]]></returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.GetFieldDbType(System.Object)">
            <summary>
            根据传入对象的值类型获取其对应的DbType类型
            </summary>
            <param name="fieldValue">对象的值</param>
            <returns>DbType类型</returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.IsDate(System.String)">
            <summary>
            判断输入的字符是否为日期
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.SearchCondition.IsDateHourMinute(System.String)">
            <summary>
            判断输入的字符是否为日期,如2004-07-12 14:25|||1900-01-01 00:00|||9999-12-31 23:59
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="P:BestWise.Common.SearchCondition.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:BestWise.Common.SearchInfo">
            <summary>
            查询信息实体类
            </summary>
        </member>
        <member name="P:BestWise.Common.SearchInfo.GroupName">
            <summary>
            分组的名称，如需构造一个括号内的条件 ( Test = "AA1" OR Test = "AA2"), 定义一个组名集中条件
            </summary>
        </member>
        <member name="P:BestWise.Common.SearchInfo.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:BestWise.Common.SearchInfo.FieldValue">
            <summary>
            字段的值
            </summary>
        </member>
        <member name="P:BestWise.Common.SearchInfo.SqlOperator">
            <summary>
            字段的Sql操作符号
            </summary>
        </member>
        <member name="P:BestWise.Common.SearchInfo.IsQuery">
            <summary>
            是否作为查询条件
            </summary>
        </member>
        <member name="T:BestWise.Common.SqlOperator">
            <summary>
            Sql的查询符号
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.Like">
            <summary>
            Like 模糊查询
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.NotLike">
            <summary>
            Not LiKE 模糊查询
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.LikeStartAt">
            <summary>
            Like 开始匹配模糊查询，如Like 'ABC%'
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.Equal">
            <summary>
            ＝ is equal to 等于号 
            </summary>
        </member>
        <!-- 对于成员“F:BestWise.Common.SqlOperator.NotEqual”忽略有格式错误的 XML 注释 -->
        <member name="F:BestWise.Common.SqlOperator.MoreThan">
            <summary>
            ＞ is more than 大于号
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.LessThan">
            <summary>
            ＜ is less than 小于号 
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.MoreThanOrEqual">
            <summary>
            ≥ is more than or equal to 大于或等于号 
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.LessThanOrEqual">
            <summary>
            ≤ is less than or equal to 小于或等于号
            </summary>
        </member>
        <member name="F:BestWise.Common.SqlOperator.In">
            <summary>
            在某个字符串值中
            </summary>
        </member>
        <member name="T:BestWise.Common.ValueText">
            <summary>
            值的类型为整型的值与文本队的实体类
            </summary>
        </member>
        <member name="T:BestWise.Common.ValueText`1">
            <summary>
            值与文本队的实体类
            </summary>
            <typeparam name="TValue">值的对象类型。</typeparam>
        </member>
        <member name="P:BestWise.Common.ValueText`1.Value">
            <summary>
            对象的值。
            </summary>
        </member>
        <member name="P:BestWise.Common.ValueText`1.Text">
            <summary>
            对象的文本。
            </summary>
        </member>
        <member name="P:BestWise.Common.SelectListItem.Selected">
            <summary>
            是否选中
            </summary>
        </member>
        <member name="P:BestWise.Common.SelectListOption.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:BestWise.Common.SelectListOption.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:BestWise.Common.SelectListOption.Selected">
            <summary>
            是否选中
            </summary>
        </member>
        <member name="P:BestWise.Common.SelectListOption.Attach">
            <summary>
            附属选项
            </summary>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.AddAll(System.Collections.Generic.List{BestWise.Common.SelectListItem})">
            <summary>
            在集合中的最前面添加全部选项
            </summary>
            <param name="selectList">需要设置的集合项</param>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.AddAll_Version_110(System.Collections.Generic.List{BestWise.Common.SelectListItem})">
            <summary>
            在集合中的最前面添加全部选项
            </summary>
            <param name="selectList">需要设置的集合项</param>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.AddNoSelectAll(System.Collections.Generic.List{BestWise.Common.SelectListItem})">
            <summary>
            在集合中的最前面添加全部选项
            </summary>
            <param name="selectList">需要设置的集合项</param>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.AddAllOfBack(System.Collections.Generic.List{BestWise.Common.SelectListItem})">
            <summary>
            在集合中的最后面添加全部选项
            </summary>
            <param name="selectList">需要设置的集合项</param>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.SetSelected(System.Collections.Generic.List{BestWise.Common.SelectListItem},System.Int32)">
            <summary>
            设置选中值
            </summary>
            <param name="selectList">需要设置的集合项</param>
            <param name="selectedValue">选中值</param>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.SetSelected_Version_110(System.Collections.Generic.List{BestWise.Common.SelectListItem},System.Int32)">
            <summary>
            设置选中值
            </summary>
            <param name="selectList">需要设置的集合项</param>
            <param name="selectedValue">选中值</param>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.GetBasicInfoList``1">
            <summary>
            将枚举转换为集合对象
            </summary>
            <returns>返回集合对象</returns>
        </member>
        <member name="M:BestWise.Common.SelectListExtensions.GetList``1">
            <summary>
            将枚举转换为集合对象
            </summary>
            <returns>返回集合对象</returns>
        </member>
        <member name="T:BestWise.Common.SendEmail">
            <summary>
            邮件发送类
            </summary>
        </member>
        <member name="M:BestWise.Common.SendEmail.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="toAddresses">收件人地址（多个以,号分开）</param>
            <param name="fromAddress">发件人地址</param>
            <param name="title">主题</param>
            <param name="body">正文</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="toAddress">收件人地址</param>
            <param name="fromAddress">发件人地址</param>
            <param name="toName">收件人名字</param>
            <param name="fromName">发件人姓名</param>
            <param name="title">主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">正文是否为html格式</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetSmtp(System.String,System.String)">
            <summary>
            设置SMTP，并且将邮件发送出去
            所有参数都设置完成后再调用该方法
            </summary>
            <param name="password">发件人密码</param>
            <param name="smtpHost">SMTP服务器地址</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetSmtp(System.String,System.String,System.String,System.Int32,System.Boolean,System.Net.Mail.MailPriority)">
            <summary>
            设置SMTP，并且将邮件发送出去
            所有参数都设置完成后再调用该方法
            </summary>
            <param name="address">发件人地址（必须为真实有效的email地址）</param>
            <param name="password">发件人密码</param>
            <param name="smtpHost">SMTP服务器地址</param>
            <param name="smtpPort">SMTP服务器的端口</param>
            <param name="isEnableSsl">SMTP服务器是否启用SSL加密</param>
            <param name="priority">邮件的优先级</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetMoreToAddress(System.String)">
            <summary>
            设置更多收件人
            </summary>
            <param name="toAddresses">收件人地址</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetMoreToAddress(System.String,System.String)">
            <summary>
            设置更多收件人
            </summary>
            <param name="toAddresses">收件人地址</param>
            <param name="toName">收件人名字</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetCarbonCopyFor(System.String)">
            <summary>
            设置抄送者（多个以,号分开）
            </summary>
            <param name="ccAddresses">抄送者地址</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetCarbonCopyFor(System.String,System.String)">
            <summary>
            设置抄送者
            </summary>
            <param name="ccAddress">抄送者地址</param>
            <param name="ccName">抄送者名字</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetBlindCarbonCopyFor(System.String)">
            <summary>
            设置密送者（多个以,号分开）
            </summary>
            <param name="bccAddresses">密送者</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.SetBlindCarbonCopyFor(System.String,System.String)">
            <summary>
            设置密送者
            </summary>
            <param name="bccAddress">密送者</param>
            <param name="bccName">密送者名字</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.Attachments(System.String)">
            <summary>
            添加附件（自动识别文件类型）
            </summary>
            <param name="fileName">单个文件的路径</param>
        </member>
        <member name="M:BestWise.Common.SendEmail.Attachments(System.IO.Stream,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="contentStream"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:BestWise.Common.SendEmail.AttachmentsForRTF(System.String)">
            <summary>
            添加附件（默认为富文本RTF格式）
            </summary>
            <param name="fileName">单个文件的路径</param>
        </member>
        <member name="T:BestWise.Common.ServerStatus">
            <summary>
            服务器状态枚举
            </summary>
        </member>
        <member name="F:BestWise.Common.ServerStatus.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:BestWise.Common.ServerStatus.Succeed">
            <summary>
            成功
            </summary>
        </member>
        <member name="T:BestWise.Common.StatusCode">
            <summary>
            操作状态码
            </summary>
        </member>
        <member name="F:BestWise.Common.StatusCode.Unauthorized">
            <summary>
            未操作权限
            </summary>
        </member>
        <member name="F:BestWise.Common.StatusCode.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:BestWise.Common.StatusCode.Succeed">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:BestWise.Common.StatusCode.Invalid">
            <summary>
            请求数据无效
            </summary>
        </member>
        <member name="F:BestWise.Common.StatusCode.ExistData">
            <summary>
            数据已存在
            </summary>
        </member>
        <member name="F:BestWise.Common.StatusCode.Nonexistence">
            <summary>
            数据已被删除
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_NUMBERIC">
            <summary>
            数字字符串的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_NUMBERICOFSIGN">
            <summary>
            数字字符串 可带正负号的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_DECIMAL">
            <summary>
            浮点数字符串的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_DECIMALOFSIGN">
            <summary>
            浮点数字符串的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_UPPERCASE">
            <summary>
            大写字母字符串的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_LOWERCASE">
            <summary>
            小写字母字符串的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_HASCHINESE">
            <summary>
            包含中文字符的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_EMAIL">
            <summary>
            邮件地址的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_URL">
            <summary>
            URL的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_PHONE">
            <summary>
            电话号码的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_BASE64STRING">
            <summary>
            base64字符串的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_SAFESQLSTRING">
            <summary>
            有Sql危险字符的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_SAFEUSERINFOSTRING">
            <summary>
            有危险的可能用于链接的字符串的正则表达式
            </summary>
        </member>
        <member name="F:BestWise.Common.StringExtensions.REGEX_IPADDRESS">
            <summary>
            ip地址的正则表达式
            </summary>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsNumeric(System.String)">
            <summary>
            是否数字字符串
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsNumericOfSign(System.String)">
            <summary>
            是否数字字符串 可带正负号
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsDecimal(System.String)">
            <summary>
            是否是浮点数
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsDecimalOfSign(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsUppercase(System.String)">
            <summary>
            是否是大写字母字符
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsLowercase(System.String)">
            <summary>
            是否是小写字母字符
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsHasChinese(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsEmail(System.String)">
            <summary>
            是否是邮件地址
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsURL(System.String)">
            <summary>
            是否是正确的URL
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsPhone(System.String)">
            <summary>
            是否是电话号码
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsGuid(System.String)">
            <summary>
            是否是GUID
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsBase64String(System.String)">
            <summary>
            判断是否为base64字符串
            </summary>
            <param name="helper"></param>
            <returns>判断结果</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsSafeSqlString(System.String)">
            <summary>
            检测是否有Sql危险字符
            </summary>
            <param name="helper"></param>
            <returns>判断结果</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsSafeUserInfoString(System.String)">
            <summary>
            检测是否有危险的可能用于链接的字符串
            </summary>
            <param name="helper"></param>
            <returns>判断结果</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsIPAddress(System.String)">
            <summary>
            检测是否为ip
            </summary>
            <param name="helper"></param>
            <returns>判断结果</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsIPSect(System.String)">
            <summary>
            
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.IsMapPath(System.String)">
            <summary>
            
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.Split(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="helper"></param>
            <param name="separator">分离字符</param>
            <returns>一个数组</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.Split(System.String,System.String,System.Int32)">
            <summary>
            分割字符串
            </summary>
            <param name="helper"></param>
            <param name="separator">分离字符</param>
            <param name="count">要返回的子字符串的最大数量。</param>
            <returns>一个数组</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetIPOrDomainByPath(System.String)">
            <summary>
            获取当前字符串的IP或域名部分
            </summary>
            <param name="helper"></param>
            <returns>IP或域名</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetMapPath(System.String)">
            <summary>
            获得当前物理绝对路径
            </summary>
            <param name="helper"></param>
            <returns>物理绝对路径</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetUrl(System.String)">
            <summary>
            将物理绝对地址转换成网络相对地址
            </summary>
            <param name="path">物理绝对地址</param>
            <returns>网络相对地址</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetUrl(System.String,System.String)">
            <summary>
            将物理绝对地址转换成网络相对地址
            </summary>
            <param name="path">物理绝对地址</param>
            <param name="root">物理根地址</param>
            <returns>网络相对地址</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetMapPaths(System.String)">
            <summary>
            将网络地址转为物理路径
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetFileName(System.String)">
             <summary>
            根据网络地址相对路径获取文件名，如： /Admin/images/Pro/test.gif。返回文件名，如：test.gif
             </summary>
             <param name="helper">网络地址相对路径获取文件名，如： /Admin/images/Pro/test.gif</param>
             <returns>返回文件名，如：test.gif</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetFileExtension(System.String)">
             <summary>
            根据网络地址相对路径获取文件扩展名，如： /Admin/images/Pro/test.gif。返回扩展名，如：.gif
             </summary>
             <param name="helper">根据网络地址相对路径获取文件扩展名，如： /Admin/images/Pro/test.gif</param>
             <returns>返回扩展名，如：.gif</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetFileNameWithoutExtension(System.String)">
             <summary>
            根据网络地址相对路径获取文件名，不包括扩展名，如： /Admin/images/Pro/test.gif。返回文件名，不包括扩展名，如：test
             </summary>
             <param name="helper">根据网络地址相对路径文件名，不包括扩展名，如： /Admin/images/Pro/test.gif</param>
             <returns>返回文件名，不包括扩展名，如：test</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            将字符串截取为指定长度的字符串
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            将字符串从右截取为指定长度的字符串
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.Middle(System.String,System.Int32)">
            <summary>
            将字符串从中间截取为指定长度的字符串
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.LeftByHtml(System.String,System.Int32)">
            <summary>
            将字符串截取为指定长度的字符串(清除HTML标记)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.LeftByHtmls(System.String,System.Int32)">
            <summary>
             将字符串截取为指定长度的字符串(清除HTML标记 + ...)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.MiddleByHtml(System.String,System.Int32)">
            <summary>
            将字符串从中间截取为指定长度的字符串(清除HTML标记)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.RightByHtml(System.String,System.Int32)">
            <summary>
            将字符串从右截取为指定长度的字符串(清除HTML标记)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.LeftOfDoublet(System.String,System.Int32,System.Boolean)">
            <summary>
            将字符串截取为指定长度的字符串(区分双字节字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <param name="hasEllipsis">是否有省略号(默认：无)</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.LeftOfDoublet(System.String,System.Int32)">
            <summary>
            将字符串截取为指定长度的字符串(区分双字节字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.MiddleOfDoublet(System.String,System.Int32)">
            <summary>
            将字符串从中间截取为指定长度的字符串(区分双字节字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.RightOfDoublet(System.String,System.Int32,System.Boolean)">
            <summary>
            将字符串从右截取为指定长度的字符串(区分双字节字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <param name="hasEllipsis">是否有省略号(默认：无)</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.RightOfDoublet(System.String,System.Int32)">
            <summary>
            将字符串从右截取为指定长度的字符串(区分双字节字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.LeftOfChinese(System.String,System.Int32,System.Boolean)">
            <summary>
            将字符串截取为指定长度的字符串(区分中文字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <param name="hasEllipsis">是否有省略号(默认：无)</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.LeftOfChinese(System.String,System.Int32)">
            <summary>
            将字符串截取为指定长度的字符串(区分中文字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.MiddleOfChinese(System.String,System.Int32)">
            <summary>
            将字符串从中间截取为指定长度的字符串(区分中文字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.RightOfChinese(System.String,System.Int32,System.Boolean)">
            <summary>
            将字符串从右截取为指定长度的字符串(区分中文字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <param name="hasEllipsis">是否有省略号(默认：无)</param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.RightOfChinese(System.String,System.Int32)">
            <summary>
            将字符串从右截取为指定长度的字符串(区分中文字符)
            </summary>
            <param name="helper"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.HtmlEncode(System.String)">
            <summary>
            字符串编码
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ClearHtml(System.String)">
            <summary>
            清除HTML标记
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.HtmlToText(System.String,System.Int32)">
            <summary>
            字符串清理
            </summary>
            <param name="helper"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.Encode(System.String)">
            <summary>
            转换成 HTML code
            </summary>
            <param name="helper">string</param>
            <returns>string</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.Decode(System.String)">
             <summary>
            解析html成 普通文本
             </summary>
             <param name="helper">string</param>
             <returns>string</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetStringValueByRegex(System.String,System.String,System.String)">
            <summary>
            获取当前字符串符合正则表达式，且指定组名的名称的字符串值。
            </summary>
            <param name="helper">当前字符串。</param>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <param name="groupname">捕获组的名称（默认为:value）。</param>
            <returns>返回捕获组的名称的字符串值。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetStringValueByRegex(System.String,System.String)">
            <summary>
            获取当前字符串符合正则表达式，且 value 组的名称的字符串值。
            </summary>
            <param name="helper">当前字符串。</param>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <returns>返回捕获 value 组的名称为 value 的字符串值。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetIntValueByRegex(System.String,System.String,System.String)">
            <summary>
            获取当前字符串符合正则表达式，且指定组的名称的整型值。
            </summary>
            <param name="helper">当前字符串</param>
            <param name="pattern">正则表达式。</param>
            <param name="groupname">捕获组的名称（默认为:value）。</param>
            <returns>返回捕获组的名称的整型值。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetIntValueByRegex(System.String,System.String)">
            <summary>
            获取当前字符串符合正则表达式，且 value 组的名称的整型值。
            </summary>
            <param name="helper">当前字符串</param>
            <param name="pattern">正则表达式。</param>
            <returns>返回捕获 value 组的名称的整型值。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.HtmlTrim(System.String)">
            <summary>
            移出 HTML 字符串两端面的空格。
            </summary>
            <param name="helper">当前HTML 字符串。</param>
            <returns>返回移出空格后的字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ClaerHtmlAttribute(System.String)">
            <summary>
            清理无效的 HTML 属性
            </summary>
            <param name="helper">当前HTML 字符串。</param>
            <returns>返回清理后的 HTML 字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ToSBC(System.String)">
            <summary>
            转为全角的函数(SBC case)
            </summary>
            <param name="helper">要转换的字符串。</param>
            <returns>返回转换结果字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ToSBC(System.String,System.String)">
            <summary>
            转为全角的函数(SBC case)
            </summary>
            <param name="helper">要转换的字符串。</param>
            <param name="special">是需要转换的字符所串成的字符串（为空时，不做限制，转换所有字符）。</param>
            <returns>返回转换结果字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ToDBC(System.String)">
            <summary>
             转为半角的函数(DBC case)
            </summary>
            <param name="helper">要转换的字符串。</param>
            <returns>返回转换结果字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ToDBC(System.String,System.String)">
            <summary>
             转为半角的函数(DBC case)
            </summary>
            <param name="helper">要转换的字符串。</param>
            <param name="special">是需要转换的字符所串成的字符串（为空时，不做限制，转换所有字符）。</param>
            <returns>返回转换结果字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ToJson``1(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ToObjectByXml``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ToEntityByXml``1(System.IO.Stream)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.DecimalToNRadix(System.String,System.Int16)">
            <summary>
            
            </summary>
            <param name="Count"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.DecimalToNRadix(System.UInt64,System.Int16)">
            <summary>
            
            </summary>
            <param name="Count"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.DesRadixToDecimal(System.String,System.Int16)">
            <summary>
            
            </summary>
            <param name="Count"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetContentType(System.String)">
            <summary>    
            从注册表获取文件类型    
            </summary>    
            <param name="filename">包含扩展名的文件名</param>    
            <returns>如：application/stream</returns>    
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetContentType(System.IO.FileInfo)">
            <summary>    
            从注册表获取文件类型    
            </summary>    
            <param name="filename">包含扩展名的文件名</param>    
            <returns>如：application/stream</returns>    
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetFileExtensionByContentType(System.String)">
            <summary>
            根据文件类型得到文件扩展名
            </summary>
            <param name="contentType">文件类型</param>
            <returns>返回文件扩展名</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetPhoneNumberDealWith(System.String)">
            <summary>
            处理手机号敏感数字
            </summary>
            <param name="_phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetUserNameDealWith(System.String)">
            <summary>
            处理用户敏感的用户名或匿名
            </summary>
            <param name="_userName"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetOutterHtml(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="html"></param>
            <param name="attrName"></param>
            <param name="attrValue"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetOutterHtml(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="html"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetRandomNum(System.Int32)">
            <summary>
            获取指定长度的纯数字随机数字串
            </summary>
            <param name="intlong">数字串长度</param>
            <returns>纯数字随机数字串</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.HtmlImageAddedHost(System.String,System.Uri)">
            <summary>
            将 HTML 字符串中的图片路径加上主机域名。
            </summary>
            <param name="html">HTML 字符串。</param>
            <param name="uri">主机域名。</param>
            <returns>返回带绝对图片路径的 HTML 字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.HtmlImageAddedHost(System.String,System.String)">
            <summary>
            将 HTML 字符串中的图片路径加上主机域名。
            </summary>
            <param name="html">HTML 字符串。</param>
            <param name="host">主机域名字符串（含协议，如： http://、https:// 等）。</param>
            <returns>返回带绝对图片路径的 HTML 字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.ChoiceOptionsHtml(System.String,System.Int32)">
            <summary>
            对选择题的选项的处理
            </summary>
            <param name="html">题干的 HTML。</param>
            <param name="typeId">试题的题型 Id。</param>
            <returns>返回新的题干 HTML。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.GetHtmlNode(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.HtmlImageAddedHost(System.String)">
            <summary>
            将 HTML 字符串中的图片路径加上主机域名（默认为当前主机域名）。
            </summary>
            <param name="html">HTML 字符串。</param>
            <returns>返回带绝对图片路径的 HTML 字符串。</returns>
        </member>
        <member name="M:BestWise.Common.StringExtensions.HtmlSerialNumber(System.String,System.Int32,System.Decimal)">
            <summary>
            在 HTML 字符串前面加上顺序号。
            </summary>
            <param name="html">HTML 字符串。</param>
            <param name="serialNumber">顺序号</param>
            <param name="score">分数</param>
            <returns>返回带顺序号的 HTML 字符串。</returns>
        </member>
        <member name="T:BestWise.Common.Tree`2">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TText"></typeparam>
        </member>
        <member name="P:BestWise.Common.Tree`2.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:BestWise.Common.Tree`2.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:BestWise.Common.Tree`2.Childrens">
            <summary>
            
            </summary>
        </member>
        <member name="M:BestWise.Common.TypeExtentions.IsNumericType(System.Type)">
            <summary>
            是否是数值类型。
            </summary>
            <param name="type">数据类型</param>
            <returns>返回是否是数值类型。</returns>
        </member>
        <member name="M:BestWise.Common.TypeExtentions.IsDateTimeType(System.Type)">
            <summary>
            是否是日期时间类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.TypeExtentions.IsBooleanType(System.Type)">
            <summary>
            是否是布尔类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.TypeExtentions.IsNumericType``1(``0)">
            <summary>
            是否是数值类型。
            </summary>
            <typeparam name="TValue">值的类型。</typeparam>
            <param name="value">值。</param>
            <returns>返回是否是数值类型。</returns>
        </member>
        <member name="M:BestWise.Common.TypeExtentions.GetPropertyByColumnName(System.Type,System.String)">
            <summary>
            通过列名得到属性元数据。
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns>返回属性元数据。</returns>
        </member>
        <member name="M:BestWise.Common.UriExtensions.GetRequestText(System.Uri,System.Net.CookieCollection,System.Object,System.Nullable{System.TimeSpan},System.Net.WebProxy)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="cookies"></param>
            <param name="lockObject"></param>
            <param name="sleepTime"></param>
            <param name="webProxy"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.UriExtensions.AjaxRequestText(System.Uri,System.Net.Http.HttpMethod,System.Object,System.Net.CookieCollection,System.Object,System.Nullable{System.TimeSpan},System.Net.WebProxy)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="httpMethod"></param>
            <param name="param"></param>
            <param name="cookies"></param>
            <param name="lockObject"></param>
            <param name="sleepTime"></param>
            <param name="webProxy"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.UriExtensions.GetRequestText(System.Uri,System.Net.Http.HttpMethod,System.Object,System.Net.CookieCollection,System.Object,System.Nullable{System.TimeSpan},System.Net.WebProxy)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="httpMethod"></param>
            <param name="param"></param>
            <param name="cookies"></param>
            <param name="lockObject"></param>
            <param name="sleepTime"></param>
            <param name="webProxy"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.UriExtensions.GetNetFileInfo(System.Uri,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="isLock"></param>
            <param name="sleepTime"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.UriExtensions._GetRequestText(System.Uri,System.Net.Http.HttpMethod,System.Object,System.Net.CookieCollection,System.Boolean,System.Object,System.Nullable{System.TimeSpan},System.Net.WebProxy)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="httpMethod"></param>
            <param name="param"></param>
            <param name="cookies"></param>
            <param name="isAjax"></param>
            <param name="lockObject"></param>
            <param name="sleepTime"></param>
            <param name="webProxy"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.UriExtensions.GetCookieCollection(System.Uri)">
            <summary>
            得到站点 Cookie
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.UriExtensions.GetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:BestWise.Common.ValidErrors">
            <summary>
            验证错误信息。
            </summary>
        </member>
        <member name="P:BestWise.Common.ValidErrors.Field">
            <summary>
            未通过验证的字段。
            </summary>
        </member>
        <member name="P:BestWise.Common.ValidErrors.ErrorMessages">
            <summary>
            未通过验证的错误消息。
            </summary>
        </member>
        <member name="T:BestWise.Common.ValueText`2">
            <summary>
            值与文本队的实体类
            </summary>
            <typeparam name="TValue">值的对象类型。</typeparam>
            <typeparam name="TText">文本的对象类型。</typeparam>
        </member>
        <member name="P:BestWise.Common.ValueText`2.Value">
            <summary>
            对象的值。
            </summary>
        </member>
        <member name="P:BestWise.Common.ValueText`2.Text">
            <summary>
            对象的文本。
            </summary>
        </member>
        <member name="M:BestWise.Common.ValueTextExtensions.GetBasicInfoList``1">
            <summary>
            将枚举转换为集合对象
            </summary>
            <returns>返回集合对象</returns>
        </member>
        <member name="T:BestWise.Common.NetFileInfo">
            <summary>
            网络文件信息
            </summary>
        </member>
        <member name="P:BestWise.Common.NetFileInfo.Uri">
            <summary>
            文件网络路径。
            </summary>
        </member>
        <member name="P:BestWise.Common.NetFileInfo.Bytes">
            <summary>
            文件的 byte 数组值。
            </summary>
        </member>
        <member name="P:BestWise.Common.NetFileInfo.ContentType">
            <summary>
            文件的类型。
            </summary>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendAsync(System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendAsync(System.Net.Http.HttpMethod,System.Uri,System.Object)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendAsync(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendGetStreamAsync(System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendGetStreamAsync(System.Net.Http.HttpMethod,System.Uri,System.Object)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendGetStreamAsync(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetBytesAsync(System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetBytesAsync(System.Net.Http.HttpMethod,System.Uri,System.Object)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetBytesAsync(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetNetFileInfoAsync(System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetNetFileInfoAsync(System.Net.Http.HttpMethod,System.Uri,System.Object)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetNetFileInfoAsync(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            
            </summary>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendByJsonAsync``1(System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendByJsonAsync``1(System.Net.Http.HttpMethod,System.Uri,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendByJsonAsync``1(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendByXmlAsync``1(System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendByXmlAsync``1(System.Net.Http.HttpMethod,System.Uri,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.SendByXmlAsync``1(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="httpMethod"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetHttpClient(System.Uri)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.WebRequest.GetParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="P:BestWise.Common.WebRequest.Proxy">
            <summary>
            设置请求的代理服务器。
            </summary>
        </member>
        <member name="P:BestWise.Common.WebRequest.IsUseProxy">
            <summary>
            
            </summary>
        </member>
        <member name="M:BestWise.Common.XMLHelper.DeserializeByXml``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">返回序列化后的对象实例的类型。</typeparam>
            <param name="xml">XML 格式的字符串</param>
            <returns>返回一个对象实例</returns>
        </member>
        <member name="M:BestWise.Common.XMLHelper.DeserializeByXml``1(System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">返回序列化后的对象实例的类型。</typeparam>
            <param name="stream">反序列化 XML 字符串信息的流对象实例</param>
            <returns>返回一个对象实例</returns>
        </member>
        <member name="M:BestWise.Common.XMLHelper.ToXml``1(``0)">
            <summary>
            将对象序列化成 XML 格式的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BestWise.Common.XMLHelper.SerializeXml``1(``0)">
            <summary>
            将对象序列化成 XML 格式的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
    </members>
</doc>
